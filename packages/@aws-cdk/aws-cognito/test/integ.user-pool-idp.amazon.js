"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const lib_1 = require("../lib");
/*
 * Stack verification steps
 * * Visit the URL provided by stack output 'SignInLink' in a browser, and verify the 'Login with Amazon' link shows up.
 * * If you plug in valid 'Login with Amazon' credentials, the federated log in should work.
 */
const app = new core_1.App();
const stack = new core_1.Stack(app, 'integ-user-pool-idp-amazon');
const userpool = new lib_1.UserPool(stack, 'pool', {
    removalPolicy: core_1.RemovalPolicy.DESTROY,
});
new lib_1.UserPoolIdentityProviderAmazon(stack, 'amazon', {
    userPool: userpool,
    clientId: 'amzn-client-id',
    clientSecret: 'amzn-client-secret',
    attributeMapping: {
        givenName: lib_1.ProviderAttribute.AMAZON_NAME,
        email: lib_1.ProviderAttribute.AMAZON_EMAIL,
        custom: {
            userId: lib_1.ProviderAttribute.AMAZON_USER_ID,
        },
    },
});
const client = userpool.addClient('client');
const domain = userpool.addDomain('domain', {
    cognitoDomain: {
        domainPrefix: 'nija-test-pool',
    },
});
new core_1.CfnOutput(stack, 'SignInLink', {
    value: domain.signInUrl(client, {
        redirectUri: 'https://example.com',
    }),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcudXNlci1wb29sLWlkcC5hbWF6b24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy51c2VyLXBvb2wtaWRwLmFtYXpvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUFxRTtBQUNyRSxnQ0FBcUY7QUFFckY7Ozs7R0FJRztBQUNILE1BQU0sR0FBRyxHQUFHLElBQUksVUFBRyxFQUFFLENBQUM7QUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFLLENBQUMsR0FBRyxFQUFFLDRCQUE0QixDQUFDLENBQUM7QUFFM0QsTUFBTSxRQUFRLEdBQUcsSUFBSSxjQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRTtJQUMzQyxhQUFhLEVBQUUsb0JBQWEsQ0FBQyxPQUFPO0NBQ3JDLENBQUMsQ0FBQztBQUVILElBQUksb0NBQThCLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtJQUNsRCxRQUFRLEVBQUUsUUFBUTtJQUNsQixRQUFRLEVBQUUsZ0JBQWdCO0lBQzFCLFlBQVksRUFBRSxvQkFBb0I7SUFDbEMsZ0JBQWdCLEVBQUU7UUFDaEIsU0FBUyxFQUFFLHVCQUFpQixDQUFDLFdBQVc7UUFDeEMsS0FBSyxFQUFFLHVCQUFpQixDQUFDLFlBQVk7UUFDckMsTUFBTSxFQUFFO1lBQ04sTUFBTSxFQUFFLHVCQUFpQixDQUFDLGNBQWM7U0FDekM7S0FDRjtDQUNGLENBQUMsQ0FBQztBQUVILE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFNUMsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUU7SUFDMUMsYUFBYSxFQUFFO1FBQ2IsWUFBWSxFQUFFLGdCQUFnQjtLQUMvQjtDQUNGLENBQUMsQ0FBQztBQUVILElBQUksZ0JBQVMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO0lBQ2pDLEtBQUssRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUM5QixXQUFXLEVBQUUscUJBQXFCO0tBQ25DLENBQUM7Q0FDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHAsIENmbk91dHB1dCwgUmVtb3ZhbFBvbGljeSwgU3RhY2sgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IFByb3ZpZGVyQXR0cmlidXRlLCBVc2VyUG9vbCwgVXNlclBvb2xJZGVudGl0eVByb3ZpZGVyQW1hem9uIH0gZnJvbSAnLi4vbGliJztcblxuLypcbiAqIFN0YWNrIHZlcmlmaWNhdGlvbiBzdGVwc1xuICogKiBWaXNpdCB0aGUgVVJMIHByb3ZpZGVkIGJ5IHN0YWNrIG91dHB1dCAnU2lnbkluTGluaycgaW4gYSBicm93c2VyLCBhbmQgdmVyaWZ5IHRoZSAnTG9naW4gd2l0aCBBbWF6b24nIGxpbmsgc2hvd3MgdXAuXG4gKiAqIElmIHlvdSBwbHVnIGluIHZhbGlkICdMb2dpbiB3aXRoIEFtYXpvbicgY3JlZGVudGlhbHMsIHRoZSBmZWRlcmF0ZWQgbG9nIGluIHNob3VsZCB3b3JrLlxuICovXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5jb25zdCBzdGFjayA9IG5ldyBTdGFjayhhcHAsICdpbnRlZy11c2VyLXBvb2wtaWRwLWFtYXpvbicpO1xuXG5jb25zdCB1c2VycG9vbCA9IG5ldyBVc2VyUG9vbChzdGFjaywgJ3Bvb2wnLCB7XG4gIHJlbW92YWxQb2xpY3k6IFJlbW92YWxQb2xpY3kuREVTVFJPWSxcbn0pO1xuXG5uZXcgVXNlclBvb2xJZGVudGl0eVByb3ZpZGVyQW1hem9uKHN0YWNrLCAnYW1hem9uJywge1xuICB1c2VyUG9vbDogdXNlcnBvb2wsXG4gIGNsaWVudElkOiAnYW16bi1jbGllbnQtaWQnLFxuICBjbGllbnRTZWNyZXQ6ICdhbXpuLWNsaWVudC1zZWNyZXQnLFxuICBhdHRyaWJ1dGVNYXBwaW5nOiB7XG4gICAgZ2l2ZW5OYW1lOiBQcm92aWRlckF0dHJpYnV0ZS5BTUFaT05fTkFNRSxcbiAgICBlbWFpbDogUHJvdmlkZXJBdHRyaWJ1dGUuQU1BWk9OX0VNQUlMLFxuICAgIGN1c3RvbToge1xuICAgICAgdXNlcklkOiBQcm92aWRlckF0dHJpYnV0ZS5BTUFaT05fVVNFUl9JRCxcbiAgICB9LFxuICB9LFxufSk7XG5cbmNvbnN0IGNsaWVudCA9IHVzZXJwb29sLmFkZENsaWVudCgnY2xpZW50Jyk7XG5cbmNvbnN0IGRvbWFpbiA9IHVzZXJwb29sLmFkZERvbWFpbignZG9tYWluJywge1xuICBjb2duaXRvRG9tYWluOiB7XG4gICAgZG9tYWluUHJlZml4OiAnbmlqYS10ZXN0LXBvb2wnLFxuICB9LFxufSk7XG5cbm5ldyBDZm5PdXRwdXQoc3RhY2ssICdTaWduSW5MaW5rJywge1xuICB2YWx1ZTogZG9tYWluLnNpZ25JblVybChjbGllbnQsIHtcbiAgICByZWRpcmVjdFVyaTogJ2h0dHBzOi8vZXhhbXBsZS5jb20nLFxuICB9KSxcbn0pOyJdfQ==