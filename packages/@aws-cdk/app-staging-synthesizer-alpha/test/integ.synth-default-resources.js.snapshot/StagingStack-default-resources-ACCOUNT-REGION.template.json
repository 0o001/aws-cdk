{
 "Resources": {
  "CdkFileRoleE26CEABA": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":root"
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "RoleName": {
     "Fn::Join": [
      "",
      [
       "cdk-default-resources-file-role-",
       {
        "Ref": "AWS::Region"
       }
      ]
     ]
    }
   }
  },
  "CdkFileRoleDefaultPolicy621C7E5B": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "CdkStagingBucket1636058C",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "CdkStagingBucket1636058C",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:DescribeKey",
        "kms:Encrypt",
        "kms:GenerateDataKey*",
        "kms:ReEncrypt*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "BucketKey7092080A",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CdkFileRoleDefaultPolicy621C7E5B",
    "Roles": [
     {
      "Ref": "CdkFileRoleE26CEABA"
     }
    ]
   }
  },
  "BucketKey7092080A": {
   "Type": "AWS::KMS::Key",
   "Properties": {
    "KeyPolicy": {
     "Statement": [
      {
       "Action": "kms:*",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":root"
          ]
         ]
        }
       },
       "Resource": "*"
      },
      {
       "Action": [
        "kms:CancelKeyDeletion",
        "kms:Create*",
        "kms:Delete*",
        "kms:Describe*",
        "kms:Disable*",
        "kms:Enable*",
        "kms:Get*",
        "kms:List*",
        "kms:Put*",
        "kms:Revoke*",
        "kms:ScheduleKeyDeletion",
        "kms:TagResource",
        "kms:UntagResource",
        "kms:Update*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":root"
          ]
         ]
        }
       },
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain"
  },
  "BucketKeyAlias69A0886F": {
   "Type": "AWS::KMS::Alias",
   "Properties": {
    "AliasName": "alias/cdk-default-resources-staging",
    "TargetKeyId": {
     "Fn::GetAtt": [
      "BucketKey7092080A",
      "Arn"
     ]
    }
   }
  },
  "CdkStagingBucket1636058C": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "KMSMasterKeyID": {
         "Fn::GetAtt": [
          "BucketKey7092080A",
          "Arn"
         ]
        },
        "SSEAlgorithm": "aws:kms"
       }
      }
     ]
    },
    "BucketName": {
     "Fn::Join": [
      "",
      [
       "cdk-default-resources-staging-",
       {
        "Ref": "AWS::AccountId"
       },
       "-",
       {
        "Ref": "AWS::Region"
       }
      ]
     ]
    },
    "LifecycleConfiguration": {
     "Rules": [
      {
       "NoncurrentVersionExpiration": {
        "NoncurrentDays": 365
       },
       "Status": "Enabled"
      },
      {
       "ExpirationInDays": 30,
       "Prefix": "deploy-time/",
       "Status": "Enabled"
      }
     ]
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CdkStagingBucketPolicy42BD1F92": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "CdkStagingBucket1636058C"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:*",
       "Condition": {
        "Bool": {
         "aws:SecureTransport": "false"
        }
       },
       "Effect": "Deny",
       "Principal": {
        "AWS": "*"
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "CdkStagingBucket1636058C",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "CdkStagingBucket1636058C",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "CdkStagingBucket1636058C",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "CdkStagingBucket1636058C",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":role/cdk-hnb659fds-deploy-role-",
           {
            "Ref": "AWS::AccountId"
           },
           "-",
           {
            "Ref": "AWS::Region"
           }
          ]
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "CdkStagingBucket1636058C",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "CdkStagingBucket1636058C",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   }
  },
  "CdkStagingBucketAutoDeleteObjectsCustomResource800E998D": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "CdkStagingBucket1636058C"
    }
   },
   "DependsOn": [
    "CdkStagingBucketPolicy42BD1F92"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\"use strict\";var I=Object.create;var c=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var A=Object.getPrototypeOf,P=Object.prototype.hasOwnProperty;var L=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},d=(t,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of w(e))!P.call(t,s)&&s!==o&&c(t,s,{get:()=>e[s],enumerable:!(r=f(e,s))||r.enumerable});return t};var l=(t,e,o)=>(o=t!=null?I(A(t)):{},d(e||!t||!t.__esModule?c(o,\"default\",{value:t,enumerable:!0}):o,t)),b=t=>d(c({},\"__esModule\",{value:!0}),t);var W={};L(W,{autoDeleteHandler:()=>C,handler:()=>F});module.exports=b(W);var h=require(\"aws-sdk\");var p=l(require(\"https\")),R=l(require(\"url\")),a={sendHttpRequest:T,log:x,includeStackTraces:!0,userHandlerIndex:\"./index\"},m=\"AWSCDK::CustomResourceProviderFramework::CREATE_FAILED\",k=\"AWSCDK::CustomResourceProviderFramework::MISSING_PHYSICAL_ID\";function y(t){return async(e,o)=>{let r={...e,ResponseURL:\"...\"};if(a.log(JSON.stringify(r,void 0,2)),e.RequestType===\"Delete\"&&e.PhysicalResourceId===m){a.log(\"ignoring DELETE event caused by a failed CREATE event\"),await i(\"SUCCESS\",e);return}try{let s=await t(r,o),n=D(e,s);await i(\"SUCCESS\",n)}catch(s){let n={...e,Reason:a.includeStackTraces?s.stack:s.message};n.PhysicalResourceId||(e.RequestType===\"Create\"?(a.log(\"CREATE failed, responding with a marker physical resource id so that the subsequent DELETE will be ignored\"),n.PhysicalResourceId=m):a.log(`ERROR: Malformed event. \"PhysicalResourceId\" is required: ${JSON.stringify(e)}`)),await i(\"FAILED\",n)}}}function D(t,e={}){let o=e.PhysicalResourceId??t.PhysicalResourceId??t.RequestId;if(t.RequestType===\"Delete\"&&o!==t.PhysicalResourceId)throw new Error(`DELETE: cannot change the physical resource ID from \"${t.PhysicalResourceId}\" to \"${e.PhysicalResourceId}\" during deletion`);return{...t,...e,PhysicalResourceId:o}}async function i(t,e){let o={Status:t,Reason:e.Reason??t,StackId:e.StackId,RequestId:e.RequestId,PhysicalResourceId:e.PhysicalResourceId||k,LogicalResourceId:e.LogicalResourceId,NoEcho:e.NoEcho,Data:e.Data};a.log(\"submit response to cloudformation\",o);let r=JSON.stringify(o),s=R.parse(e.ResponseURL),n={hostname:s.hostname,path:s.path,method:\"PUT\",headers:{\"content-type\":\"\",\"content-length\":Buffer.byteLength(r,\"utf8\")}};await B({attempts:5,sleep:1e3},a.sendHttpRequest)(n,r)}async function T(t,e){return new Promise((o,r)=>{try{let s=p.request(t,n=>o());s.on(\"error\",r),s.write(e),s.end()}catch(s){r(s)}})}function x(t,...e){console.log(t,...e)}function B(t,e){return async(...o)=>{let r=t.attempts,s=t.sleep;for(;;)try{return await e(...o)}catch(n){if(r--<=0)throw n;await H(Math.floor(Math.random()*s)),s*=2}}}async function H(t){return new Promise(e=>setTimeout(e,t))}var E=\"aws-cdk:auto-delete-objects\",u=new h.S3,F=y(C);async function C(t){switch(t.RequestType){case\"Create\":return;case\"Update\":return O(t);case\"Delete\":return g(t.ResourceProperties?.BucketName)}}async function O(t){let e=t,o=e.OldResourceProperties?.BucketName,r=e.ResourceProperties?.BucketName;if(r!=null&&o!=null&&r!==o)return g(o)}async function S(t){let e=await u.listObjectVersions({Bucket:t}).promise(),o=[...e.Versions??[],...e.DeleteMarkers??[]];if(o.length===0)return;let r=o.map(s=>({Key:s.Key,VersionId:s.VersionId}));await u.deleteObjects({Bucket:t,Delete:{Objects:r}}).promise(),e?.IsTruncated&&await S(t)}async function g(t){if(!t)throw new Error(\"No BucketName was provided.\");if(!await N(t)){process.stdout.write(`Bucket does not have '${E}' tag, skipping cleaning.\n`);return}try{await S(t)}catch(e){if(e.code!==\"NoSuchBucket\")throw e}}async function N(t){return(await u.getBucketTagging({Bucket:t}).promise()).TagSet.some(o=>o.Key===E&&o.Value===\"true\")}0&&(module.exports={autoDeleteHandler,handler});\n"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs16.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "CdkStagingBucket1636058C"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ]
  },
  "CdkImageRoleF1394AC3": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":root"
          ]
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "RoleName": {
     "Fn::Join": [
      "",
      [
       "cdk-default-resources-image-role-",
       {
        "Ref": "AWS::Region"
       }
      ]
     ]
    }
   }
  },
  "CdkImageRoleDefaultPolicy4A1572DE": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecr:BatchCheckLayerAvailability",
        "ecr:BatchGetImage",
        "ecr:CompleteLayerUpload",
        "ecr:DescribeImages",
        "ecr:DescribeRepositories",
        "ecr:GetDownloadUrlForLayer",
        "ecr:InitiateLayerUpload",
        "ecr:PutImage",
        "ecr:UploadLayerPart"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "defaultresourcesecrasset2FBE6B8A9",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "defaultresourcesecrasset9191BD6E",
          "Arn"
         ]
        }
       ]
      },
      {
       "Action": "ecr:GetAuthorizationToken",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "CdkImageRoleDefaultPolicy4A1572DE",
    "Roles": [
     {
      "Ref": "CdkImageRoleF1394AC3"
     }
    ]
   }
  },
  "defaultresourcesecrasset9191BD6E": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "LifecyclePolicy": {
     "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"description\":\"Garbage collect old image versions and keep the specified number of latest versions\",\"selection\":{\"tagStatus\":\"any\",\"countType\":\"imageCountMoreThan\",\"countNumber\":3},\"action\":{\"type\":\"expire\"}}]}"
    },
    "RepositoryName": "default-resources/ecr-asset",
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-images",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "defaultresourcesecrassetAutoDeleteImagesCustomResource7AB58D8F": {
   "Type": "Custom::ECRAutoDeleteImages",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomECRAutoDeleteImagesCustomResourceProviderHandler8D89C030",
      "Arn"
     ]
    },
    "RepositoryName": {
     "Ref": "defaultresourcesecrasset9191BD6E"
    }
   },
   "DependsOn": [
    "defaultresourcesecrasset9191BD6E"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "CustomECRAutoDeleteImagesCustomResourceProviderRole665F2773": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ],
    "Policies": [
     {
      "PolicyName": "Inline",
      "PolicyDocument": {
       "Version": "2012-10-17",
       "Statement": [
        {
         "Effect": "Allow",
         "Action": [
          "ecr:BatchDeleteImage",
          "ecr:DescribeRepositories",
          "ecr:ListImages",
          "ecr:ListTagsForResource"
         ],
         "Resource": [
          {
           "Fn::GetAtt": [
            "defaultresourcesecrasset9191BD6E",
            "Arn"
           ]
          },
          {
           "Fn::GetAtt": [
            "defaultresourcesecrasset2FBE6B8A9",
            "Arn"
           ]
          }
         ]
        }
       ]
      }
     }
    ]
   }
  },
  "CustomECRAutoDeleteImagesCustomResourceProviderHandler8D89C030": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\"use strict\";var C=Object.create;var c=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,P=Object.prototype.hasOwnProperty;var L=(e,o)=>{for(var t in o)c(e,t,{get:o[t],enumerable:!0})},d=(e,o,t,s)=>{if(o&&typeof o==\"object\"||typeof o==\"function\")for(let r of A(o))!P.call(e,r)&&r!==t&&c(e,r,{get:()=>o[r],enumerable:!(s=S(o,r))||s.enumerable});return e};var p=(e,o,t)=>(t=e!=null?C(w(e)):{},d(o||!e||!e.__esModule?c(t,\"default\",{value:e,enumerable:!0}):t,e)),b=e=>d(c({},\"__esModule\",{value:!0}),e);var q={};L(q,{autoDeleteHandler:()=>E,handler:()=>k});module.exports=b(q);var h=require(\"aws-sdk\");var l=p(require(\"https\")),R=p(require(\"url\")),n={sendHttpRequest:x,log:N,includeStackTraces:!0,userHandlerIndex:\"./index\"},m=\"AWSCDK::CustomResourceProviderFramework::CREATE_FAILED\",D=\"AWSCDK::CustomResourceProviderFramework::MISSING_PHYSICAL_ID\";function y(e){return async(o,t)=>{let s={...o,ResponseURL:\"...\"};if(n.log(JSON.stringify(s,void 0,2)),o.RequestType===\"Delete\"&&o.PhysicalResourceId===m){n.log(\"ignoring DELETE event caused by a failed CREATE event\"),await u(\"SUCCESS\",o);return}try{let r=await e(s,t),a=T(o,r);await u(\"SUCCESS\",a)}catch(r){let a={...o,Reason:n.includeStackTraces?r.stack:r.message};a.PhysicalResourceId||(o.RequestType===\"Create\"?(n.log(\"CREATE failed, responding with a marker physical resource id so that the subsequent DELETE will be ignored\"),a.PhysicalResourceId=m):n.log(`ERROR: Malformed event. \"PhysicalResourceId\" is required: ${JSON.stringify(o)}`)),await u(\"FAILED\",a)}}}function T(e,o={}){let t=o.PhysicalResourceId??e.PhysicalResourceId??e.RequestId;if(e.RequestType===\"Delete\"&&t!==e.PhysicalResourceId)throw new Error(`DELETE: cannot change the physical resource ID from \"${e.PhysicalResourceId}\" to \"${o.PhysicalResourceId}\" during deletion`);return{...e,...o,PhysicalResourceId:t}}async function u(e,o){let t={Status:e,Reason:o.Reason??e,StackId:o.StackId,RequestId:o.RequestId,PhysicalResourceId:o.PhysicalResourceId||D,LogicalResourceId:o.LogicalResourceId,NoEcho:o.NoEcho,Data:o.Data};n.log(\"submit response to cloudformation\",t);let s=JSON.stringify(t),r=R.parse(o.ResponseURL),a={hostname:r.hostname,path:r.path,method:\"PUT\",headers:{\"content-type\":\"\",\"content-length\":Buffer.byteLength(s,\"utf8\")}};await F({attempts:5,sleep:1e3},n.sendHttpRequest)(a,s)}async function x(e,o){return new Promise((t,s)=>{try{let r=l.request(e,a=>t());r.on(\"error\",s),r.write(o),r.end()}catch(r){s(r)}})}function N(e,...o){console.log(e,...o)}function F(e,o){return async(...t)=>{let s=e.attempts,r=e.sleep;for(;;)try{return await o(...t)}catch(a){if(s--<=0)throw a;await H(Math.floor(Math.random()*r)),r*=2}}}async function H(e){return new Promise(o=>setTimeout(o,e))}var g=\"aws-cdk:auto-delete-images\",i=new h.ECR,k=y(E);async function E(e){switch(e.RequestType){case\"Create\":break;case\"Update\":return W(e);case\"Delete\":return f(e.ResourceProperties?.RepositoryName)}}async function W(e){let o=e,t=o.OldResourceProperties?.RepositoryName,s=o.ResourceProperties?.RepositoryName;if(s&&t&&s!==t)return f(t)}async function I(e){let o=await i.listImages(e).promise(),t=[],s=[];(o.imageIds??[]).forEach(a=>{\"imageTag\"in a?s.push(a):t.push(a)});let r=o.nextToken??null;t.length===0&&s.length===0||(s.length!==0&&await i.batchDeleteImage({repositoryName:e.repositoryName,imageIds:s}).promise(),t.length!==0&&await i.batchDeleteImage({repositoryName:e.repositoryName,imageIds:t}).promise(),r&&await I({...e,nextToken:r}))}async function f(e){if(!e)throw new Error(\"No RepositoryName was provided.\");let t=(await i.describeRepositories({repositoryNames:[e]}).promise()).repositories?.find(s=>s.repositoryName===e);if(!await _(t?.repositoryArn)){process.stdout.write(`Repository does not have '${g}' tag, skipping cleaning.\n`);return}try{await I({repositoryName:e})}catch(s){if(s.name!==\"RepositoryNotFoundException\")throw s}}async function _(e){return(await i.listTagsForResource({resourceArn:e}).promise()).tags?.some(t=>t.Key===g&&t.Value===\"true\")}0&&(module.exports={autoDeleteHandler,handler});\n"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomECRAutoDeleteImagesCustomResourceProviderRole665F2773",
      "Arn"
     ]
    },
    "Runtime": "nodejs16.x",
    "Description": "Lambda function for auto-deleting images in undefined repository."
   },
   "DependsOn": [
    "CustomECRAutoDeleteImagesCustomResourceProviderRole665F2773"
   ]
  },
  "defaultresourcesecrasset2FBE6B8A9": {
   "Type": "AWS::ECR::Repository",
   "Properties": {
    "LifecyclePolicy": {
     "LifecyclePolicyText": "{\"rules\":[{\"rulePriority\":1,\"description\":\"Garbage collect old image versions and keep the specified number of latest versions\",\"selection\":{\"tagStatus\":\"any\",\"countType\":\"imageCountMoreThan\",\"countNumber\":3},\"action\":{\"type\":\"expire\"}}]}"
    },
    "RepositoryName": "default-resources/ecr-asset-2",
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-images",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  },
  "defaultresourcesecrasset2AutoDeleteImagesCustomResource1272F059": {
   "Type": "Custom::ECRAutoDeleteImages",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomECRAutoDeleteImagesCustomResourceProviderHandler8D89C030",
      "Arn"
     ]
    },
    "RepositoryName": {
     "Ref": "defaultresourcesecrasset2FBE6B8A9"
    }
   },
   "DependsOn": [
    "defaultresourcesecrasset2FBE6B8A9"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete"
  }
 },
 "Mappings": {
  "DefaultCrNodeVersionMap": {
   "af-south-1": {
    "value": "nodejs16.x"
   },
   "ap-east-1": {
    "value": "nodejs16.x"
   },
   "ap-northeast-1": {
    "value": "nodejs16.x"
   },
   "ap-northeast-2": {
    "value": "nodejs16.x"
   },
   "ap-northeast-3": {
    "value": "nodejs16.x"
   },
   "ap-south-1": {
    "value": "nodejs16.x"
   },
   "ap-south-2": {
    "value": "nodejs16.x"
   },
   "ap-southeast-1": {
    "value": "nodejs16.x"
   },
   "ap-southeast-2": {
    "value": "nodejs16.x"
   },
   "ap-southeast-3": {
    "value": "nodejs16.x"
   },
   "ca-central-1": {
    "value": "nodejs16.x"
   },
   "cn-north-1": {
    "value": "nodejs16.x"
   },
   "cn-northwest-1": {
    "value": "nodejs16.x"
   },
   "eu-central-1": {
    "value": "nodejs16.x"
   },
   "eu-central-2": {
    "value": "nodejs16.x"
   },
   "eu-north-1": {
    "value": "nodejs16.x"
   },
   "eu-south-1": {
    "value": "nodejs16.x"
   },
   "eu-south-2": {
    "value": "nodejs16.x"
   },
   "eu-west-1": {
    "value": "nodejs16.x"
   },
   "eu-west-2": {
    "value": "nodejs16.x"
   },
   "eu-west-3": {
    "value": "nodejs16.x"
   },
   "me-central-1": {
    "value": "nodejs16.x"
   },
   "me-south-1": {
    "value": "nodejs16.x"
   },
   "sa-east-1": {
    "value": "nodejs16.x"
   },
   "us-east-1": {
    "value": "nodejs16.x"
   },
   "us-east-2": {
    "value": "nodejs16.x"
   },
   "us-gov-east-1": {
    "value": "nodejs16.x"
   },
   "us-gov-west-1": {
    "value": "nodejs16.x"
   },
   "us-iso-east-1": {
    "value": "nodejs14.x"
   },
   "us-iso-west-1": {
    "value": "nodejs14.x"
   },
   "us-isob-east-1": {
    "value": "nodejs14.x"
   },
   "us-west-1": {
    "value": "nodejs16.x"
   },
   "us-west-2": {
    "value": "nodejs16.x"
   }
  }
 }
}