"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logs = require("@aws-cdk/aws-logs");
const cdk = require("@aws-cdk/core");
const integ_tests_1 = require("@aws-cdk/integ-tests");
const apigateway = require("../lib");
class Test extends cdk.Stack {
    constructor(scope, id) {
        super(scope, id);
        const testFormat = apigateway.AccessLogFormat.custom(JSON.stringify({
            requestId: apigateway.AccessLogField.contextRequestId(),
            sourceIp: apigateway.AccessLogField.contextIdentitySourceIp(),
            method: apigateway.AccessLogField.contextHttpMethod(),
            callerAccountId: apigateway.AccessLogField.contextCallerAccountId(),
            ownerAccountId: apigateway.AccessLogField.contextOwnerAccountId(),
            userContext: {
                sub: apigateway.AccessLogField.contextAuthorizerClaims('sub'),
                email: apigateway.AccessLogField.contextAuthorizerClaims('email'),
            },
            clientCertPem: apigateway.AccessLogField.contextIdentityClientCertPem(),
            subjectDN: apigateway.AccessLogField.contextIdentityClientCertSubjectDN(),
            issunerDN: apigateway.AccessLogField.contextIdentityClientCertIssunerDN(),
            serialNumber: apigateway.AccessLogField.contextIdentityClientCertSerialNumber(),
            validityNotBefore: apigateway.AccessLogField.contextIdentityClientCertValidityNotBefore(),
            validityNotAfter: apigateway.AccessLogField.contextIdentityClientCertValidityNotAfter(),
        }));
        const logGroup = new logs.LogGroup(this, 'MyLogGroup');
        const api = new apigateway.RestApi(this, 'MyApi', {
            cloudWatchRole: true,
            deployOptions: {
                accessLogDestination: new apigateway.LogGroupLogDestination(logGroup),
                accessLogFormat: testFormat,
            },
        });
        api.root.addMethod('GET');
    }
}
const app = new cdk.App();
const testCase = new Test(app, 'test-apigateway-access-logs');
new integ_tests_1.IntegTest(app, 'apigateway-access-logs', {
    testCases: [testCase],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucmVzdGFwaS5hY2Nlc3MtbG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcucmVzdGFwaS5hY2Nlc3MtbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMENBQTBDO0FBQzFDLHFDQUFxQztBQUNyQyxzREFBaUQ7QUFDakQscUNBQXFDO0FBRXJDLE1BQU0sSUFBSyxTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBQzFCLFlBQVksS0FBYyxFQUFFLEVBQVU7UUFDcEMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2xFLFNBQVMsRUFBRSxVQUFVLENBQUMsY0FBYyxDQUFDLGdCQUFnQixFQUFFO1lBQ3ZELFFBQVEsRUFBRSxVQUFVLENBQUMsY0FBYyxDQUFDLHVCQUF1QixFQUFFO1lBQzdELE1BQU0sRUFBRSxVQUFVLENBQUMsY0FBYyxDQUFDLGlCQUFpQixFQUFFO1lBQ3JELGVBQWUsRUFBRSxVQUFVLENBQUMsY0FBYyxDQUFDLHNCQUFzQixFQUFFO1lBQ25FLGNBQWMsRUFBRSxVQUFVLENBQUMsY0FBYyxDQUFDLHFCQUFxQixFQUFFO1lBQ2pFLFdBQVcsRUFBRTtnQkFDWCxHQUFHLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUM7Z0JBQzdELEtBQUssRUFBRSxVQUFVLENBQUMsY0FBYyxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQzthQUNsRTtZQUNELGFBQWEsRUFBRSxVQUFVLENBQUMsY0FBYyxDQUFDLDRCQUE0QixFQUFFO1lBQ3ZFLFNBQVMsRUFBRSxVQUFVLENBQUMsY0FBYyxDQUFDLGtDQUFrQyxFQUFFO1lBQ3pFLFNBQVMsRUFBRSxVQUFVLENBQUMsY0FBYyxDQUFDLGtDQUFrQyxFQUFFO1lBQ3pFLFlBQVksRUFBRSxVQUFVLENBQUMsY0FBYyxDQUFDLHFDQUFxQyxFQUFFO1lBQy9FLGlCQUFpQixFQUFFLFVBQVUsQ0FBQyxjQUFjLENBQUMsMENBQTBDLEVBQUU7WUFDekYsZ0JBQWdCLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyx5Q0FBeUMsRUFBRTtTQUN4RixDQUFDLENBQUMsQ0FBQztRQUVKLE1BQU0sUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDdkQsTUFBTSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUU7WUFDaEQsY0FBYyxFQUFFLElBQUk7WUFDcEIsYUFBYSxFQUFFO2dCQUNiLG9CQUFvQixFQUFFLElBQUksVUFBVSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQztnQkFDckUsZUFBZSxFQUFFLFVBQVU7YUFDNUI7U0FDRixDQUFDLENBQUM7UUFDSCxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMzQjtDQUNGO0FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLDZCQUE2QixDQUFDLENBQUM7QUFDOUQsSUFBSSx1QkFBUyxDQUFDLEdBQUcsRUFBRSx3QkFBd0IsRUFBRTtJQUMzQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7Q0FDdEIsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbG9ncyBmcm9tICdAYXdzLWNkay9hd3MtbG9ncyc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBJbnRlZ1Rlc3QgfSBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cyc7XG5pbXBvcnQgKiBhcyBhcGlnYXRld2F5IGZyb20gJy4uL2xpYic7XG5cbmNsYXNzIFRlc3QgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICBjb25zdHJ1Y3RvcihzY29wZTogY2RrLkFwcCwgaWQ6IHN0cmluZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBjb25zdCB0ZXN0Rm9ybWF0ID0gYXBpZ2F0ZXdheS5BY2Nlc3NMb2dGb3JtYXQuY3VzdG9tKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIHJlcXVlc3RJZDogYXBpZ2F0ZXdheS5BY2Nlc3NMb2dGaWVsZC5jb250ZXh0UmVxdWVzdElkKCksXG4gICAgICBzb3VyY2VJcDogYXBpZ2F0ZXdheS5BY2Nlc3NMb2dGaWVsZC5jb250ZXh0SWRlbnRpdHlTb3VyY2VJcCgpLFxuICAgICAgbWV0aG9kOiBhcGlnYXRld2F5LkFjY2Vzc0xvZ0ZpZWxkLmNvbnRleHRIdHRwTWV0aG9kKCksXG4gICAgICBjYWxsZXJBY2NvdW50SWQ6IGFwaWdhdGV3YXkuQWNjZXNzTG9nRmllbGQuY29udGV4dENhbGxlckFjY291bnRJZCgpLFxuICAgICAgb3duZXJBY2NvdW50SWQ6IGFwaWdhdGV3YXkuQWNjZXNzTG9nRmllbGQuY29udGV4dE93bmVyQWNjb3VudElkKCksXG4gICAgICB1c2VyQ29udGV4dDoge1xuICAgICAgICBzdWI6IGFwaWdhdGV3YXkuQWNjZXNzTG9nRmllbGQuY29udGV4dEF1dGhvcml6ZXJDbGFpbXMoJ3N1YicpLFxuICAgICAgICBlbWFpbDogYXBpZ2F0ZXdheS5BY2Nlc3NMb2dGaWVsZC5jb250ZXh0QXV0aG9yaXplckNsYWltcygnZW1haWwnKSxcbiAgICAgIH0sXG4gICAgICBjbGllbnRDZXJ0UGVtOiBhcGlnYXRld2F5LkFjY2Vzc0xvZ0ZpZWxkLmNvbnRleHRJZGVudGl0eUNsaWVudENlcnRQZW0oKSxcbiAgICAgIHN1YmplY3RETjogYXBpZ2F0ZXdheS5BY2Nlc3NMb2dGaWVsZC5jb250ZXh0SWRlbnRpdHlDbGllbnRDZXJ0U3ViamVjdEROKCksXG4gICAgICBpc3N1bmVyRE46IGFwaWdhdGV3YXkuQWNjZXNzTG9nRmllbGQuY29udGV4dElkZW50aXR5Q2xpZW50Q2VydElzc3VuZXJETigpLFxuICAgICAgc2VyaWFsTnVtYmVyOiBhcGlnYXRld2F5LkFjY2Vzc0xvZ0ZpZWxkLmNvbnRleHRJZGVudGl0eUNsaWVudENlcnRTZXJpYWxOdW1iZXIoKSxcbiAgICAgIHZhbGlkaXR5Tm90QmVmb3JlOiBhcGlnYXRld2F5LkFjY2Vzc0xvZ0ZpZWxkLmNvbnRleHRJZGVudGl0eUNsaWVudENlcnRWYWxpZGl0eU5vdEJlZm9yZSgpLFxuICAgICAgdmFsaWRpdHlOb3RBZnRlcjogYXBpZ2F0ZXdheS5BY2Nlc3NMb2dGaWVsZC5jb250ZXh0SWRlbnRpdHlDbGllbnRDZXJ0VmFsaWRpdHlOb3RBZnRlcigpLFxuICAgIH0pKTtcblxuICAgIGNvbnN0IGxvZ0dyb3VwID0gbmV3IGxvZ3MuTG9nR3JvdXAodGhpcywgJ015TG9nR3JvdXAnKTtcbiAgICBjb25zdCBhcGkgPSBuZXcgYXBpZ2F0ZXdheS5SZXN0QXBpKHRoaXMsICdNeUFwaScsIHtcbiAgICAgIGNsb3VkV2F0Y2hSb2xlOiB0cnVlLFxuICAgICAgZGVwbG95T3B0aW9uczoge1xuICAgICAgICBhY2Nlc3NMb2dEZXN0aW5hdGlvbjogbmV3IGFwaWdhdGV3YXkuTG9nR3JvdXBMb2dEZXN0aW5hdGlvbihsb2dHcm91cCksXG4gICAgICAgIGFjY2Vzc0xvZ0Zvcm1hdDogdGVzdEZvcm1hdCxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgYXBpLnJvb3QuYWRkTWV0aG9kKCdHRVQnKTtcbiAgfVxufVxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCB0ZXN0Q2FzZSA9IG5ldyBUZXN0KGFwcCwgJ3Rlc3QtYXBpZ2F0ZXdheS1hY2Nlc3MtbG9ncycpO1xubmV3IEludGVnVGVzdChhcHAsICdhcGlnYXRld2F5LWFjY2Vzcy1sb2dzJywge1xuICB0ZXN0Q2FzZXM6IFt0ZXN0Q2FzZV0sXG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=