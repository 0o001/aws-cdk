"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codepipeline = require("@aws-cdk/aws-codepipeline");
const ecr = require("@aws-cdk/aws-ecr");
const s3 = require("@aws-cdk/aws-s3");
const cdk = require("@aws-cdk/core");
const integ_tests_1 = require("@aws-cdk/integ-tests");
const cpactions = require("../lib");
/**
 * Manual validation steps
 *
 * Run test with `-vv` so that the outputs are printed and
 * `--no-clean` flag so that the stack is not deleted after the deployment is complete
 *
 * You should see output like:
 *
 * Outputs:
 * aws-cdk-codepipeline-ecr-source.PipelineConsoleLink = https://us-east-1.console.aws.amazon.com/codesuite/codepipeline/pipelines/aws-cdk-codepipeline-ecr-source-MyPipelineAED38ECF-1P0OYRLWF8FHY/view?region=us-east-1
 * aws-cdk-codepipeline-ecr-source.LoginCommand = aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 11111111111.dkr.ecr.us-east-1.amazonaws.com
 * aws-cdk-codepipeline-ecr-source.PushCommand = docker tag public.ecr.aws/lambda/provided 11111111111.dkr.ecr.us-east-1.amazonaws.com/aws-cdk-codepipeline-ecr-source-myecrrepo767466d0-gsrntpvfwc5w:latest \
 * && docker push 11111111111.dkr.ecr.us-east-1.amazonaws.com/aws-cdk-codepipeline-ecr-source-myecrrepo767466d0-gsrntpvfwc5w:latest
 *
 * Run the LoginCommand & PushCommand to tag and push an image to the ECR repository.
 * Then use the PipelineConsoleLink to navigate to the pipeline console page to validate that the pipeline
 * was triggered successfully.
 */
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-cdk-codepipeline-ecr-source');
const bucket = new s3.Bucket(stack, 'MyBucket', {
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
const pipeline = new codepipeline.Pipeline(stack, 'MyPipeline', {
    artifactBucket: bucket,
});
const repository = new ecr.Repository(stack, 'MyEcrRepo', {
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
const sourceStage = pipeline.addStage({ stageName: 'Source' });
sourceStage.addAction(new cpactions.EcrSourceAction({
    actionName: 'ECR_Source',
    output: new codepipeline.Artifact(),
    repository,
}));
const approveStage = pipeline.addStage({ stageName: 'Approve' });
approveStage.addAction(new cpactions.ManualApprovalAction({ actionName: 'ManualApproval' }));
new cdk.CfnOutput(stack, 'LoginCommand', {
    value: `aws ecr get-login-password --region ${stack.region} | docker login --username AWS --password-stdin ${stack.account}.dkr.ecr.${stack.region}.amazonaws.com`,
});
new cdk.CfnOutput(stack, 'PushCommand', {
    value: `docker tag public.ecr.aws/lambda/provided ${repository.repositoryUriForTag('latest')} && docker push ${repository.repositoryUriForTag('latest')}`,
});
new cdk.CfnOutput(stack, 'PipelineConsoleLink', {
    value: `https://${stack.region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${pipeline.pipelineName}/view?region=${stack.region}`,
});
new integ_tests_1.IntegTest(app, 'ecr-source-action', {
    testCases: [stack],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucGlwZWxpbmUtZWNyLXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLnBpcGVsaW5lLWVjci1zb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwREFBMEQ7QUFDMUQsd0NBQXdDO0FBQ3hDLHNDQUFzQztBQUN0QyxxQ0FBcUM7QUFDckMsc0RBQWlEO0FBQ2pELG9DQUFvQztBQUVwQzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFFSCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGlDQUFpQyxDQUFDLENBQUM7QUFFcEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7SUFDOUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTztDQUN6QyxDQUFDLENBQUM7QUFDSCxNQUFNLFFBQVEsR0FBRyxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtJQUM5RCxjQUFjLEVBQUUsTUFBTTtDQUN2QixDQUFDLENBQUM7QUFFSCxNQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRTtJQUN4RCxhQUFhLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPO0NBQ3pDLENBQUMsQ0FBQztBQUNILE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUMvRCxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUyxDQUFDLGVBQWUsQ0FBQztJQUNsRCxVQUFVLEVBQUUsWUFBWTtJQUN4QixNQUFNLEVBQUUsSUFBSSxZQUFZLENBQUMsUUFBUSxFQUFFO0lBQ25DLFVBQVU7Q0FDWCxDQUFDLENBQUMsQ0FBQztBQUVKLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUNqRSxZQUFZLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRTdGLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO0lBQ3ZDLEtBQUssRUFBRSx1Q0FBdUMsS0FBSyxDQUFDLE1BQU0sbURBQW1ELEtBQUssQ0FBQyxPQUFPLFlBQVksS0FBSyxDQUFDLE1BQU0sZ0JBQWdCO0NBQ25LLENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO0lBQ3RDLEtBQUssRUFBRSw2Q0FBNkMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsVUFBVSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxFQUFFO0NBQzFKLENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUscUJBQXFCLEVBQUU7SUFDOUMsS0FBSyxFQUFFLFdBQVcsS0FBSyxDQUFDLE1BQU0sNERBQTRELFFBQVEsQ0FBQyxZQUFZLGdCQUFnQixLQUFLLENBQUMsTUFBTSxFQUFFO0NBQzlJLENBQUMsQ0FBQztBQUVILElBQUksdUJBQVMsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUU7SUFDdEMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO0NBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvZGVwaXBlbGluZSBmcm9tICdAYXdzLWNkay9hd3MtY29kZXBpcGVsaW5lJztcbmltcG9ydCAqIGFzIGVjciBmcm9tICdAYXdzLWNkay9hd3MtZWNyJztcbmltcG9ydCAqIGFzIHMzIGZyb20gJ0Bhd3MtY2RrL2F3cy1zMyc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBJbnRlZ1Rlc3QgfSBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cyc7XG5pbXBvcnQgKiBhcyBjcGFjdGlvbnMgZnJvbSAnLi4vbGliJztcblxuLyoqXG4gKiBNYW51YWwgdmFsaWRhdGlvbiBzdGVwc1xuICpcbiAqIFJ1biB0ZXN0IHdpdGggYC12dmAgc28gdGhhdCB0aGUgb3V0cHV0cyBhcmUgcHJpbnRlZCBhbmRcbiAqIGAtLW5vLWNsZWFuYCBmbGFnIHNvIHRoYXQgdGhlIHN0YWNrIGlzIG5vdCBkZWxldGVkIGFmdGVyIHRoZSBkZXBsb3ltZW50IGlzIGNvbXBsZXRlXG4gKlxuICogWW91IHNob3VsZCBzZWUgb3V0cHV0IGxpa2U6XG4gKlxuICogT3V0cHV0czpcbiAqIGF3cy1jZGstY29kZXBpcGVsaW5lLWVjci1zb3VyY2UuUGlwZWxpbmVDb25zb2xlTGluayA9IGh0dHBzOi8vdXMtZWFzdC0xLmNvbnNvbGUuYXdzLmFtYXpvbi5jb20vY29kZXN1aXRlL2NvZGVwaXBlbGluZS9waXBlbGluZXMvYXdzLWNkay1jb2RlcGlwZWxpbmUtZWNyLXNvdXJjZS1NeVBpcGVsaW5lQUVEMzhFQ0YtMVAwT1lSTFdGOEZIWS92aWV3P3JlZ2lvbj11cy1lYXN0LTFcbiAqIGF3cy1jZGstY29kZXBpcGVsaW5lLWVjci1zb3VyY2UuTG9naW5Db21tYW5kID0gYXdzIGVjciBnZXQtbG9naW4tcGFzc3dvcmQgLS1yZWdpb24gdXMtZWFzdC0xIHwgZG9ja2VyIGxvZ2luIC0tdXNlcm5hbWUgQVdTIC0tcGFzc3dvcmQtc3RkaW4gMTExMTExMTExMTEuZGtyLmVjci51cy1lYXN0LTEuYW1hem9uYXdzLmNvbVxuICogYXdzLWNkay1jb2RlcGlwZWxpbmUtZWNyLXNvdXJjZS5QdXNoQ29tbWFuZCA9IGRvY2tlciB0YWcgcHVibGljLmVjci5hd3MvbGFtYmRhL3Byb3ZpZGVkIDExMTExMTExMTExLmRrci5lY3IudXMtZWFzdC0xLmFtYXpvbmF3cy5jb20vYXdzLWNkay1jb2RlcGlwZWxpbmUtZWNyLXNvdXJjZS1teWVjcnJlcG83Njc0NjZkMC1nc3JudHB2ZndjNXc6bGF0ZXN0IFxcXG4gKiAmJiBkb2NrZXIgcHVzaCAxMTExMTExMTExMS5ka3IuZWNyLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tL2F3cy1jZGstY29kZXBpcGVsaW5lLWVjci1zb3VyY2UtbXllY3JyZXBvNzY3NDY2ZDAtZ3NybnRwdmZ3YzV3OmxhdGVzdFxuICpcbiAqIFJ1biB0aGUgTG9naW5Db21tYW5kICYgUHVzaENvbW1hbmQgdG8gdGFnIGFuZCBwdXNoIGFuIGltYWdlIHRvIHRoZSBFQ1IgcmVwb3NpdG9yeS5cbiAqIFRoZW4gdXNlIHRoZSBQaXBlbGluZUNvbnNvbGVMaW5rIHRvIG5hdmlnYXRlIHRvIHRoZSBwaXBlbGluZSBjb25zb2xlIHBhZ2UgdG8gdmFsaWRhdGUgdGhhdCB0aGUgcGlwZWxpbmVcbiAqIHdhcyB0cmlnZ2VyZWQgc3VjY2Vzc2Z1bGx5LlxuICovXG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdhd3MtY2RrLWNvZGVwaXBlbGluZS1lY3Itc291cmNlJyk7XG5cbmNvbnN0IGJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQoc3RhY2ssICdNeUJ1Y2tldCcsIHtcbiAgcmVtb3ZhbFBvbGljeTogY2RrLlJlbW92YWxQb2xpY3kuREVTVFJPWSxcbn0pO1xuY29uc3QgcGlwZWxpbmUgPSBuZXcgY29kZXBpcGVsaW5lLlBpcGVsaW5lKHN0YWNrLCAnTXlQaXBlbGluZScsIHtcbiAgYXJ0aWZhY3RCdWNrZXQ6IGJ1Y2tldCxcbn0pO1xuXG5jb25zdCByZXBvc2l0b3J5ID0gbmV3IGVjci5SZXBvc2l0b3J5KHN0YWNrLCAnTXlFY3JSZXBvJywge1xuICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxufSk7XG5jb25zdCBzb3VyY2VTdGFnZSA9IHBpcGVsaW5lLmFkZFN0YWdlKHsgc3RhZ2VOYW1lOiAnU291cmNlJyB9KTtcbnNvdXJjZVN0YWdlLmFkZEFjdGlvbihuZXcgY3BhY3Rpb25zLkVjclNvdXJjZUFjdGlvbih7XG4gIGFjdGlvbk5hbWU6ICdFQ1JfU291cmNlJyxcbiAgb3V0cHV0OiBuZXcgY29kZXBpcGVsaW5lLkFydGlmYWN0KCksXG4gIHJlcG9zaXRvcnksXG59KSk7XG5cbmNvbnN0IGFwcHJvdmVTdGFnZSA9IHBpcGVsaW5lLmFkZFN0YWdlKHsgc3RhZ2VOYW1lOiAnQXBwcm92ZScgfSk7XG5hcHByb3ZlU3RhZ2UuYWRkQWN0aW9uKG5ldyBjcGFjdGlvbnMuTWFudWFsQXBwcm92YWxBY3Rpb24oeyBhY3Rpb25OYW1lOiAnTWFudWFsQXBwcm92YWwnIH0pKTtcblxubmV3IGNkay5DZm5PdXRwdXQoc3RhY2ssICdMb2dpbkNvbW1hbmQnLCB7XG4gIHZhbHVlOiBgYXdzIGVjciBnZXQtbG9naW4tcGFzc3dvcmQgLS1yZWdpb24gJHtzdGFjay5yZWdpb259IHwgZG9ja2VyIGxvZ2luIC0tdXNlcm5hbWUgQVdTIC0tcGFzc3dvcmQtc3RkaW4gJHtzdGFjay5hY2NvdW50fS5ka3IuZWNyLiR7c3RhY2sucmVnaW9ufS5hbWF6b25hd3MuY29tYCxcbn0pO1xuXG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ1B1c2hDb21tYW5kJywge1xuICB2YWx1ZTogYGRvY2tlciB0YWcgcHVibGljLmVjci5hd3MvbGFtYmRhL3Byb3ZpZGVkICR7cmVwb3NpdG9yeS5yZXBvc2l0b3J5VXJpRm9yVGFnKCdsYXRlc3QnKX0gJiYgZG9ja2VyIHB1c2ggJHtyZXBvc2l0b3J5LnJlcG9zaXRvcnlVcmlGb3JUYWcoJ2xhdGVzdCcpfWAsXG59KTtcblxubmV3IGNkay5DZm5PdXRwdXQoc3RhY2ssICdQaXBlbGluZUNvbnNvbGVMaW5rJywge1xuICB2YWx1ZTogYGh0dHBzOi8vJHtzdGFjay5yZWdpb259LmNvbnNvbGUuYXdzLmFtYXpvbi5jb20vY29kZXN1aXRlL2NvZGVwaXBlbGluZS9waXBlbGluZXMvJHtwaXBlbGluZS5waXBlbGluZU5hbWV9L3ZpZXc/cmVnaW9uPSR7c3RhY2sucmVnaW9ufWAsXG59KTtcblxubmV3IEludGVnVGVzdChhcHAsICdlY3Itc291cmNlLWFjdGlvbicsIHtcbiAgdGVzdENhc2VzOiBbc3RhY2tdLFxufSk7XG4iXX0=