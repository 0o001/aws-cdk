"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaDeploymentConfig = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const base_deployment_config_1 = require("../base-deployment-config");
const utils_1 = require("../private/utils");
const traffic_routing_config_1 = require("../traffic-routing-config");
/**
 * A custom Deployment Configuration for a Lambda Deployment Group.
 * @resource AWS::CodeDeploy::DeploymentConfig
 */
class LambdaDeploymentConfig extends base_deployment_config_1.BaseDeploymentConfig {
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            computePlatform: base_deployment_config_1.ComputePlatform.LAMBDA,
            trafficRouting: props?.trafficRouting ?? traffic_routing_config_1.TrafficRouting.allAtOnce(),
        });
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_codedeploy_LambdaDeploymentConfigProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, LambdaDeploymentConfig);
            }
            throw error;
        }
    }
    /**
     * Import a Deployment Configuration for a Lambda Deployment Group defined outside the CDK.
     *
     * @param scope the parent Construct for this new Construct
     * @param id the logical ID of this new Construct
     * @param lambdaDeploymentConfigName the name of the Lambda Deployment Configuration to import
     * @returns a Construct representing a reference to an existing Lambda Deployment Configuration
     */
    static fromLambdaDeploymentConfigName(scope, id, lambdaDeploymentConfigName) {
        return this.fromDeploymentConfigName(scope, id, lambdaDeploymentConfigName);
    }
    /**
     * Import a Deployment Configuration for a Lambda Deployment Group defined outside the CDK.
     *
     * @param _scope the parent Construct for this new Construct
     * @param _id the logical ID of this new Construct
     * @param props the properties of the referenced custom Deployment Configuration
     * @returns a Construct representing a reference to an existing custom Deployment Configuration
     * @deprecated use `fromLambdaDeploymentConfigName`
     */
    static import(_scope, _id, props) {
        try {
            jsiiDeprecationWarnings.print("@aws-cdk/aws-codedeploy.LambdaDeploymentConfig#import", "use `fromLambdaDeploymentConfigName`");
            jsiiDeprecationWarnings._aws_cdk_aws_codedeploy_LambdaDeploymentConfigImportProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.import);
            }
            throw error;
        }
        return this.fromLambdaDeploymentConfigName(_scope, _id, props.deploymentConfigName);
    }
    static deploymentConfig(name) {
        return utils_1.deploymentConfig(name);
    }
}
exports.LambdaDeploymentConfig = LambdaDeploymentConfig;
_a = JSII_RTTI_SYMBOL_1;
LambdaDeploymentConfig[_a] = { fqn: "@aws-cdk/aws-codedeploy.LambdaDeploymentConfig", version: "0.0.0" };
/** CodeDeploy predefined deployment configuration that shifts all traffic to the updated Lambda function at once. */
LambdaDeploymentConfig.ALL_AT_ONCE = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaAllAtOnce');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic in the first increment. The remaining 90 percent is deployed 30 minutes later. */
LambdaDeploymentConfig.CANARY_10PERCENT_30MINUTES = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaCanary10Percent30Minutes');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic in the first increment. The remaining 90 percent is deployed five minutes later. */
LambdaDeploymentConfig.CANARY_10PERCENT_5MINUTES = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaCanary10Percent5Minutes');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic in the first increment. The remaining 90 percent is deployed 10 minutes later. */
LambdaDeploymentConfig.CANARY_10PERCENT_10MINUTES = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaCanary10Percent10Minutes');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic in the first increment. The remaining 90 percent is deployed 15 minutes later. */
LambdaDeploymentConfig.CANARY_10PERCENT_15MINUTES = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaCanary10Percent15Minutes');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic every 10 minutes until all traffic is shifted. */
LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_10MINUTES = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaLinear10PercentEvery10Minutes');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic every minute until all traffic is shifted. */
LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_1MINUTE = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaLinear10PercentEvery1Minute');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic every two minutes until all traffic is shifted. */
LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_2MINUTES = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaLinear10PercentEvery2Minutes');
/** CodeDeploy predefined deployment configuration that shifts 10 percent of traffic every three minutes until all traffic is shifted. */
LambdaDeploymentConfig.LINEAR_10PERCENT_EVERY_3MINUTES = LambdaDeploymentConfig.deploymentConfig('CodeDeployDefault.LambdaLinear10PercentEvery3Minutes');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95bWVudC1jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZXBsb3ltZW50LWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxzRUFBc0k7QUFDdEksNENBQW9EO0FBQ3BELHNFQUEyRDtBQTJDM0Q7OztHQUdHO0FBQ0gsTUFBYSxzQkFBdUIsU0FBUSw2Q0FBb0I7SUFpRDlELFlBQW1CLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQW1DO1FBQ2xGLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ2YsR0FBRyxLQUFLO1lBQ1IsZUFBZSxFQUFFLHdDQUFlLENBQUMsTUFBTTtZQUN2QyxjQUFjLEVBQUUsS0FBSyxFQUFFLGNBQWMsSUFBSSx1Q0FBYyxDQUFDLFNBQVMsRUFBRTtTQUNwRSxDQUFDLENBQUM7Ozs7OzsrQ0F0RE0sc0JBQXNCOzs7O0tBdURoQztJQW5DRDs7Ozs7OztPQU9HO0lBQ0ksTUFBTSxDQUFDLDhCQUE4QixDQUFDLEtBQWdCLEVBQUUsRUFBVSxFQUFFLDBCQUFrQztRQUMzRyxPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLDBCQUEwQixDQUFDLENBQUM7S0FDN0U7SUFFRDs7Ozs7Ozs7T0FRRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBaUIsRUFBRSxHQUFXLEVBQUUsS0FBd0M7Ozs7Ozs7Ozs7O1FBQzNGLE9BQU8sSUFBSSxDQUFDLDhCQUE4QixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7S0FDckY7SUFFTyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBWTtRQUMxQyxPQUFPLHdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0tBQy9COztBQS9DSCx3REF3REM7OztBQXZEQyxxSEFBcUg7QUFDOUYsa0NBQVcsR0FBRyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0FBQ2xILHNLQUFzSztBQUMvSSxpREFBMEIsR0FBRyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO0FBQ2hKLHdLQUF3SztBQUNqSixnREFBeUIsR0FBRyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0FBQzlJLHNLQUFzSztBQUMvSSxpREFBMEIsR0FBRyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO0FBQ2hKLHNLQUFzSztBQUMvSSxpREFBMEIsR0FBRyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO0FBQ2hKLHNJQUFzSTtBQUMvRyx1REFBZ0MsR0FBRyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0FBQzNKLGtJQUFrSTtBQUMzRyxxREFBOEIsR0FBRyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO0FBQ3ZKLHVJQUF1STtBQUNoSCxzREFBK0IsR0FBRyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO0FBQ3pKLHlJQUF5STtBQUNsSCxzREFBK0IsR0FBRyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxzREFBc0QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBCYXNlRGVwbG95bWVudENvbmZpZywgQmFzZURlcGxveW1lbnRDb25maWdPcHRpb25zLCBDb21wdXRlUGxhdGZvcm0sIElCYXNlRGVwbG95bWVudENvbmZpZyB9IGZyb20gJy4uL2Jhc2UtZGVwbG95bWVudC1jb25maWcnO1xuaW1wb3J0IHsgZGVwbG95bWVudENvbmZpZyB9IGZyb20gJy4uL3ByaXZhdGUvdXRpbHMnO1xuaW1wb3J0IHsgVHJhZmZpY1JvdXRpbmcgfSBmcm9tICcuLi90cmFmZmljLXJvdXRpbmctY29uZmlnJztcblxuLyoqXG4gKiBUaGUgRGVwbG95bWVudCBDb25maWd1cmF0aW9uIG9mIGEgTGFtYmRhIERlcGxveW1lbnQgR3JvdXAuXG4gKlxuICogSWYgeW91J3JlIG1hbmFnaW5nIHRoZSBEZXBsb3ltZW50IENvbmZpZ3VyYXRpb24gYWxvbmdzaWRlIHRoZSByZXN0IG9mIHlvdXIgQ0RLIHJlc291cmNlcyxcbiAqIHVzZSB0aGUgYExhbWJkYURlcGxveW1lbnRDb25maWdgIGNsYXNzLlxuICpcbiAqIElmIHlvdSB3YW50IHRvIHJlZmVyZW5jZSBhbiBhbHJlYWR5IGV4aXN0aW5nIGRlcGxveW1lbnQgY29uZmlndXJhdGlvbixcbiAqIG9yIG9uZSBkZWZpbmVkIGluIGEgZGlmZmVyZW50IENESyBTdGFjayxcbiAqIHVzZSB0aGUgYExhbWJkYURlcGxveW1lbnRDb25maWcjZnJvbUxhbWJkYURlcGxveW1lbnRDb25maWdOYW1lYCBtZXRob2QuXG4gKlxuICogVGhlIGRlZmF1bHQsIHByZS1kZWZpbmVkIENvbmZpZ3VyYXRpb25zIGFyZSBhdmFpbGFibGUgYXMgY29uc3RhbnRzIG9uIHRoZSBgTGFtYmRhRGVwbG95bWVudENvbmZpZ2AgY2xhc3NcbiAqIChgTGFtYmRhRGVwbG95bWVudENvbmZpZy5BbGxBdE9uY2VgLCBgTGFtYmRhRGVwbG95bWVudENvbmZpZy5DYW5hcnkxMFBlcmNlbnQzME1pbnV0ZXNgLCBldGMuKS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJTGFtYmRhRGVwbG95bWVudENvbmZpZyBleHRlbmRzIElCYXNlRGVwbG95bWVudENvbmZpZyB7XG59XG5cbi8qKlxuICogUHJvcGVydGllcyBvZiBhIHJlZmVyZW5jZSB0byBhIENvZGVEZXBsb3kgTGFtYmRhIERlcGxveW1lbnQgQ29uZmlndXJhdGlvbi5cbiAqXG4gKiBAc2VlIExhbWJkYURlcGxveW1lbnRDb25maWcjaW1wb3J0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGFtYmRhRGVwbG95bWVudENvbmZpZ0ltcG9ydFByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBwaHlzaWNhbCwgaHVtYW4tcmVhZGFibGUgbmFtZSBvZiB0aGUgY3VzdG9tIENvZGVEZXBsb3kgTGFtYmRhIERlcGxveW1lbnQgQ29uZmlndXJhdGlvblxuICAgKiB0aGF0IHdlIGFyZSByZWZlcmVuY2luZy5cbiAgICovXG4gIHJlYWRvbmx5IGRlcGxveW1lbnRDb25maWdOYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ29uc3RydWN0aW9uIHByb3BlcnRpZXMgb2YgYExhbWJkYURlcGxveW1lbnRDb25maWdgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExhbWJkYURlcGxveW1lbnRDb25maWdQcm9wcyBleHRlbmRzIEJhc2VEZXBsb3ltZW50Q29uZmlnT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgY29uZmlndXJhdGlvbiB0aGF0IHNwZWNpZmllcyBob3cgdHJhZmZpYyBpcyBzaGlmdGVkIGZyb20gdGhlICdibHVlJ1xuICAgKiB0YXJnZXQgZ3JvdXAgdG8gdGhlICdncmVlbicgdGFyZ2V0IGdyb3VwIGR1cmluZyBhIGRlcGxveW1lbnQuXG4gICAqIEBkZWZhdWx0IEFsbEF0T25jZVxuICAgKi9cbiAgcmVhZG9ubHkgdHJhZmZpY1JvdXRpbmc/OiBUcmFmZmljUm91dGluZztcbn1cblxuLyoqXG4gKiBBIGN1c3RvbSBEZXBsb3ltZW50IENvbmZpZ3VyYXRpb24gZm9yIGEgTGFtYmRhIERlcGxveW1lbnQgR3JvdXAuXG4gKiBAcmVzb3VyY2UgQVdTOjpDb2RlRGVwbG95OjpEZXBsb3ltZW50Q29uZmlnXG4gKi9cbmV4cG9ydCBjbGFzcyBMYW1iZGFEZXBsb3ltZW50Q29uZmlnIGV4dGVuZHMgQmFzZURlcGxveW1lbnRDb25maWcgaW1wbGVtZW50cyBJTGFtYmRhRGVwbG95bWVudENvbmZpZyB7XG4gIC8qKiBDb2RlRGVwbG95IHByZWRlZmluZWQgZGVwbG95bWVudCBjb25maWd1cmF0aW9uIHRoYXQgc2hpZnRzIGFsbCB0cmFmZmljIHRvIHRoZSB1cGRhdGVkIExhbWJkYSBmdW5jdGlvbiBhdCBvbmNlLiAqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEFMTF9BVF9PTkNFID0gTGFtYmRhRGVwbG95bWVudENvbmZpZy5kZXBsb3ltZW50Q29uZmlnKCdDb2RlRGVwbG95RGVmYXVsdC5MYW1iZGFBbGxBdE9uY2UnKTtcbiAgLyoqIENvZGVEZXBsb3kgcHJlZGVmaW5lZCBkZXBsb3ltZW50IGNvbmZpZ3VyYXRpb24gdGhhdCBzaGlmdHMgMTAgcGVyY2VudCBvZiB0cmFmZmljIGluIHRoZSBmaXJzdCBpbmNyZW1lbnQuIFRoZSByZW1haW5pbmcgOTAgcGVyY2VudCBpcyBkZXBsb3llZCAzMCBtaW51dGVzIGxhdGVyLiAqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENBTkFSWV8xMFBFUkNFTlRfMzBNSU5VVEVTID0gTGFtYmRhRGVwbG95bWVudENvbmZpZy5kZXBsb3ltZW50Q29uZmlnKCdDb2RlRGVwbG95RGVmYXVsdC5MYW1iZGFDYW5hcnkxMFBlcmNlbnQzME1pbnV0ZXMnKTtcbiAgLyoqIENvZGVEZXBsb3kgcHJlZGVmaW5lZCBkZXBsb3ltZW50IGNvbmZpZ3VyYXRpb24gdGhhdCBzaGlmdHMgMTAgcGVyY2VudCBvZiB0cmFmZmljIGluIHRoZSBmaXJzdCBpbmNyZW1lbnQuIFRoZSByZW1haW5pbmcgOTAgcGVyY2VudCBpcyBkZXBsb3llZCBmaXZlIG1pbnV0ZXMgbGF0ZXIuICovXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQ0FOQVJZXzEwUEVSQ0VOVF81TUlOVVRFUyA9IExhbWJkYURlcGxveW1lbnRDb25maWcuZGVwbG95bWVudENvbmZpZygnQ29kZURlcGxveURlZmF1bHQuTGFtYmRhQ2FuYXJ5MTBQZXJjZW50NU1pbnV0ZXMnKTtcbiAgLyoqIENvZGVEZXBsb3kgcHJlZGVmaW5lZCBkZXBsb3ltZW50IGNvbmZpZ3VyYXRpb24gdGhhdCBzaGlmdHMgMTAgcGVyY2VudCBvZiB0cmFmZmljIGluIHRoZSBmaXJzdCBpbmNyZW1lbnQuIFRoZSByZW1haW5pbmcgOTAgcGVyY2VudCBpcyBkZXBsb3llZCAxMCBtaW51dGVzIGxhdGVyLiAqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENBTkFSWV8xMFBFUkNFTlRfMTBNSU5VVEVTID0gTGFtYmRhRGVwbG95bWVudENvbmZpZy5kZXBsb3ltZW50Q29uZmlnKCdDb2RlRGVwbG95RGVmYXVsdC5MYW1iZGFDYW5hcnkxMFBlcmNlbnQxME1pbnV0ZXMnKTtcbiAgLyoqIENvZGVEZXBsb3kgcHJlZGVmaW5lZCBkZXBsb3ltZW50IGNvbmZpZ3VyYXRpb24gdGhhdCBzaGlmdHMgMTAgcGVyY2VudCBvZiB0cmFmZmljIGluIHRoZSBmaXJzdCBpbmNyZW1lbnQuIFRoZSByZW1haW5pbmcgOTAgcGVyY2VudCBpcyBkZXBsb3llZCAxNSBtaW51dGVzIGxhdGVyLiAqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENBTkFSWV8xMFBFUkNFTlRfMTVNSU5VVEVTID0gTGFtYmRhRGVwbG95bWVudENvbmZpZy5kZXBsb3ltZW50Q29uZmlnKCdDb2RlRGVwbG95RGVmYXVsdC5MYW1iZGFDYW5hcnkxMFBlcmNlbnQxNU1pbnV0ZXMnKTtcbiAgLyoqIENvZGVEZXBsb3kgcHJlZGVmaW5lZCBkZXBsb3ltZW50IGNvbmZpZ3VyYXRpb24gdGhhdCBzaGlmdHMgMTAgcGVyY2VudCBvZiB0cmFmZmljIGV2ZXJ5IDEwIG1pbnV0ZXMgdW50aWwgYWxsIHRyYWZmaWMgaXMgc2hpZnRlZC4gKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBMSU5FQVJfMTBQRVJDRU5UX0VWRVJZXzEwTUlOVVRFUyA9IExhbWJkYURlcGxveW1lbnRDb25maWcuZGVwbG95bWVudENvbmZpZygnQ29kZURlcGxveURlZmF1bHQuTGFtYmRhTGluZWFyMTBQZXJjZW50RXZlcnkxME1pbnV0ZXMnKTtcbiAgLyoqIENvZGVEZXBsb3kgcHJlZGVmaW5lZCBkZXBsb3ltZW50IGNvbmZpZ3VyYXRpb24gdGhhdCBzaGlmdHMgMTAgcGVyY2VudCBvZiB0cmFmZmljIGV2ZXJ5IG1pbnV0ZSB1bnRpbCBhbGwgdHJhZmZpYyBpcyBzaGlmdGVkLiAqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IExJTkVBUl8xMFBFUkNFTlRfRVZFUllfMU1JTlVURSA9IExhbWJkYURlcGxveW1lbnRDb25maWcuZGVwbG95bWVudENvbmZpZygnQ29kZURlcGxveURlZmF1bHQuTGFtYmRhTGluZWFyMTBQZXJjZW50RXZlcnkxTWludXRlJyk7XG4gIC8qKiBDb2RlRGVwbG95IHByZWRlZmluZWQgZGVwbG95bWVudCBjb25maWd1cmF0aW9uIHRoYXQgc2hpZnRzIDEwIHBlcmNlbnQgb2YgdHJhZmZpYyBldmVyeSB0d28gbWludXRlcyB1bnRpbCBhbGwgdHJhZmZpYyBpcyBzaGlmdGVkLiAqL1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IExJTkVBUl8xMFBFUkNFTlRfRVZFUllfMk1JTlVURVMgPSBMYW1iZGFEZXBsb3ltZW50Q29uZmlnLmRlcGxveW1lbnRDb25maWcoJ0NvZGVEZXBsb3lEZWZhdWx0LkxhbWJkYUxpbmVhcjEwUGVyY2VudEV2ZXJ5Mk1pbnV0ZXMnKTtcbiAgLyoqIENvZGVEZXBsb3kgcHJlZGVmaW5lZCBkZXBsb3ltZW50IGNvbmZpZ3VyYXRpb24gdGhhdCBzaGlmdHMgMTAgcGVyY2VudCBvZiB0cmFmZmljIGV2ZXJ5IHRocmVlIG1pbnV0ZXMgdW50aWwgYWxsIHRyYWZmaWMgaXMgc2hpZnRlZC4gKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBMSU5FQVJfMTBQRVJDRU5UX0VWRVJZXzNNSU5VVEVTID0gTGFtYmRhRGVwbG95bWVudENvbmZpZy5kZXBsb3ltZW50Q29uZmlnKCdDb2RlRGVwbG95RGVmYXVsdC5MYW1iZGFMaW5lYXIxMFBlcmNlbnRFdmVyeTNNaW51dGVzJyk7XG5cbiAgLyoqXG4gICAqIEltcG9ydCBhIERlcGxveW1lbnQgQ29uZmlndXJhdGlvbiBmb3IgYSBMYW1iZGEgRGVwbG95bWVudCBHcm91cCBkZWZpbmVkIG91dHNpZGUgdGhlIENESy5cbiAgICpcbiAgICogQHBhcmFtIHNjb3BlIHRoZSBwYXJlbnQgQ29uc3RydWN0IGZvciB0aGlzIG5ldyBDb25zdHJ1Y3RcbiAgICogQHBhcmFtIGlkIHRoZSBsb2dpY2FsIElEIG9mIHRoaXMgbmV3IENvbnN0cnVjdFxuICAgKiBAcGFyYW0gbGFtYmRhRGVwbG95bWVudENvbmZpZ05hbWUgdGhlIG5hbWUgb2YgdGhlIExhbWJkYSBEZXBsb3ltZW50IENvbmZpZ3VyYXRpb24gdG8gaW1wb3J0XG4gICAqIEByZXR1cm5zIGEgQ29uc3RydWN0IHJlcHJlc2VudGluZyBhIHJlZmVyZW5jZSB0byBhbiBleGlzdGluZyBMYW1iZGEgRGVwbG95bWVudCBDb25maWd1cmF0aW9uXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21MYW1iZGFEZXBsb3ltZW50Q29uZmlnTmFtZShzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBsYW1iZGFEZXBsb3ltZW50Q29uZmlnTmFtZTogc3RyaW5nKTogSUxhbWJkYURlcGxveW1lbnRDb25maWcge1xuICAgIHJldHVybiB0aGlzLmZyb21EZXBsb3ltZW50Q29uZmlnTmFtZShzY29wZSwgaWQsIGxhbWJkYURlcGxveW1lbnRDb25maWdOYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBvcnQgYSBEZXBsb3ltZW50IENvbmZpZ3VyYXRpb24gZm9yIGEgTGFtYmRhIERlcGxveW1lbnQgR3JvdXAgZGVmaW5lZCBvdXRzaWRlIHRoZSBDREsuXG4gICAqXG4gICAqIEBwYXJhbSBfc2NvcGUgdGhlIHBhcmVudCBDb25zdHJ1Y3QgZm9yIHRoaXMgbmV3IENvbnN0cnVjdFxuICAgKiBAcGFyYW0gX2lkIHRoZSBsb2dpY2FsIElEIG9mIHRoaXMgbmV3IENvbnN0cnVjdFxuICAgKiBAcGFyYW0gcHJvcHMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHJlZmVyZW5jZWQgY3VzdG9tIERlcGxveW1lbnQgQ29uZmlndXJhdGlvblxuICAgKiBAcmV0dXJucyBhIENvbnN0cnVjdCByZXByZXNlbnRpbmcgYSByZWZlcmVuY2UgdG8gYW4gZXhpc3RpbmcgY3VzdG9tIERlcGxveW1lbnQgQ29uZmlndXJhdGlvblxuICAgKiBAZGVwcmVjYXRlZCB1c2UgYGZyb21MYW1iZGFEZXBsb3ltZW50Q29uZmlnTmFtZWBcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaW1wb3J0KF9zY29wZTogQ29uc3RydWN0LCBfaWQ6IHN0cmluZywgcHJvcHM6IExhbWJkYURlcGxveW1lbnRDb25maWdJbXBvcnRQcm9wcyk6IElMYW1iZGFEZXBsb3ltZW50Q29uZmlnIHtcbiAgICByZXR1cm4gdGhpcy5mcm9tTGFtYmRhRGVwbG95bWVudENvbmZpZ05hbWUoX3Njb3BlLCBfaWQsIHByb3BzLmRlcGxveW1lbnRDb25maWdOYW1lKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGRlcGxveW1lbnRDb25maWcobmFtZTogc3RyaW5nKTogSUxhbWJkYURlcGxveW1lbnRDb25maWcge1xuICAgIHJldHVybiBkZXBsb3ltZW50Q29uZmlnKG5hbWUpO1xuICB9XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogTGFtYmRhRGVwbG95bWVudENvbmZpZ1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIGNvbXB1dGVQbGF0Zm9ybTogQ29tcHV0ZVBsYXRmb3JtLkxBTUJEQSxcbiAgICAgIHRyYWZmaWNSb3V0aW5nOiBwcm9wcz8udHJhZmZpY1JvdXRpbmcgPz8gVHJhZmZpY1JvdXRpbmcuYWxsQXRPbmNlKCksXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==