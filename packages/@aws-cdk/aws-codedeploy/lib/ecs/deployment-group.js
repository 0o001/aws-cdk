"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EcsDeploymentGroup = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const ecs = require("@aws-cdk/aws-ecs");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/core");
const cx_api_1 = require("@aws-cdk/cx-api");
const constructs_1 = require("constructs");
const application_1 = require("./application");
const deployment_config_1 = require("./deployment-config");
const codedeploy_generated_1 = require("../codedeploy.generated");
const base_deployment_group_1 = require("../private/base-deployment-group");
const utils_1 = require("../private/utils");
/**
 * A CodeDeploy deployment group that orchestrates ECS blue-green deployments.
 * @resource AWS::CodeDeploy::DeploymentGroup
 */
class EcsDeploymentGroup extends base_deployment_group_1.DeploymentGroupBase {
    constructor(scope, id, props) {
        super(scope, id, {
            deploymentGroupName: props.deploymentGroupName,
            role: props.role,
            roleConstructId: 'ServiceRole',
        });
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_codedeploy_EcsDeploymentGroupProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, EcsDeploymentGroup);
            }
            throw error;
        }
        this.role = this._role;
        this.application = props.application || new application_1.EcsApplication(this, 'Application');
        this.alarms = props.alarms || [];
        this.role.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('AWSCodeDeployRoleForECS'));
        this.deploymentConfig = this._bindDeploymentConfig(props.deploymentConfig || deployment_config_1.EcsDeploymentConfig.ALL_AT_ONCE);
        if (cdk.Resource.isOwnedResource(props.service)) {
            const cfnSvc = props.service.node.defaultChild;
            if (cfnSvc.deploymentController === undefined ||
                cfnSvc.deploymentController.type !== ecs.DeploymentControllerType.CODE_DEPLOY) {
                throw new Error('The ECS service associated with the deployment group must use the CODE_DEPLOY deployment controller type');
            }
            if (cfnSvc.taskDefinition !== props.service.taskDefinition.family) {
                throw new Error('The ECS service associated with the deployment group must specify the task definition using the task definition family name only. Otherwise, the task definition cannot be updated in the stack');
            }
        }
        const removeAlarmsFromDeploymentGroup = cdk.FeatureFlags.of(this).isEnabled(cx_api_1.CODEDEPLOY_REMOVE_ALARMS_FROM_DEPLOYMENT_GROUP);
        const resource = new codedeploy_generated_1.CfnDeploymentGroup(this, 'Resource', {
            applicationName: this.application.applicationName,
            serviceRoleArn: this.role.roleArn,
            deploymentGroupName: this.physicalName,
            deploymentConfigName: this.deploymentConfig.deploymentConfigName,
            deploymentStyle: {
                deploymentType: 'BLUE_GREEN',
                deploymentOption: 'WITH_TRAFFIC_CONTROL',
            },
            ecsServices: [{
                    clusterName: props.service.cluster.clusterName,
                    serviceName: props.service.serviceName,
                }],
            blueGreenDeploymentConfiguration: cdk.Lazy.any({
                produce: () => this.renderBlueGreenDeploymentConfiguration(props.blueGreenDeploymentConfig),
            }),
            loadBalancerInfo: cdk.Lazy.any({ produce: () => this.renderLoadBalancerInfo(props.blueGreenDeploymentConfig) }),
            alarmConfiguration: cdk.Lazy.any({
                produce: () => utils_1.renderAlarmConfiguration(this.alarms, props.ignorePollAlarmsFailure, removeAlarmsFromDeploymentGroup),
            }),
            autoRollbackConfiguration: cdk.Lazy.any({ produce: () => utils_1.renderAutoRollbackConfiguration(this.alarms, props.autoRollback) }),
        });
        this._setNameAndArn(resource, this.application);
        // If the deployment config is a construct, add a dependency to ensure the deployment config
        // is created before the deployment group is.
        if (constructs_1.Construct.isConstruct(this.deploymentConfig)) {
            this.node.addDependency(this.deploymentConfig);
        }
    }
    /**
     * Reference an ECS Deployment Group defined outside the CDK app.
     *
     * Account and region for the DeploymentGroup are taken from the application.
     *
     * @param scope the parent Construct for this new Construct
     * @param id the logical ID of this new Construct
     * @param attrs the properties of the referenced Deployment Group
     * @returns a Construct representing a reference to an existing Deployment Group
     */
    static fromEcsDeploymentGroupAttributes(scope, id, attrs) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_codedeploy_EcsDeploymentGroupAttributes(attrs);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.fromEcsDeploymentGroupAttributes);
            }
            throw error;
        }
        return new ImportedEcsDeploymentGroup(scope, id, attrs);
    }
    /**
     * Associates an additional alarm with this Deployment Group.
     *
     * @param alarm the alarm to associate with this Deployment Group
     */
    addAlarm(alarm) {
        this.alarms.push(alarm);
    }
    renderBlueGreenDeploymentConfiguration(options) {
        return {
            deploymentReadyOption: {
                actionOnTimeout: options.deploymentApprovalWaitTime ? 'STOP_DEPLOYMENT' : 'CONTINUE_DEPLOYMENT',
                waitTimeInMinutes: options.deploymentApprovalWaitTime?.toMinutes() ?? 0,
            },
            terminateBlueInstancesOnDeploymentSuccess: {
                action: 'TERMINATE',
                terminationWaitTimeInMinutes: options.terminationWaitTime?.toMinutes() ?? 0,
            },
        };
    }
    renderLoadBalancerInfo(options) {
        return {
            targetGroupPairInfoList: [
                {
                    targetGroups: [
                        {
                            name: options.blueTargetGroup.targetGroupName,
                        },
                        {
                            name: options.greenTargetGroup.targetGroupName,
                        },
                    ],
                    prodTrafficRoute: {
                        listenerArns: [
                            options.listener.listenerArn,
                        ],
                    },
                    testTrafficRoute: options.testListener ? {
                        listenerArns: [
                            options.testListener.listenerArn,
                        ],
                    } : undefined,
                },
            ],
        };
    }
}
exports.EcsDeploymentGroup = EcsDeploymentGroup;
_a = JSII_RTTI_SYMBOL_1;
EcsDeploymentGroup[_a] = { fqn: "@aws-cdk/aws-codedeploy.EcsDeploymentGroup", version: "0.0.0" };
class ImportedEcsDeploymentGroup extends base_deployment_group_1.ImportedDeploymentGroupBase {
    constructor(scope, id, props) {
        super(scope, id, {
            application: props.application,
            deploymentGroupName: props.deploymentGroupName,
        });
        this.application = props.application;
        this.deploymentConfig = this._bindDeploymentConfig(props.deploymentConfig || deployment_config_1.EcsDeploymentConfig.ALL_AT_ONCE);
    }
}
//# sourceMappingURL=data:application/json;base64,