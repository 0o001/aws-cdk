"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerDeploymentConfig = void 0;
const jsiiDeprecationWarnings = require("../../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const base_deployment_config_1 = require("../base-deployment-config");
const utils_1 = require("../private/utils");
/**
 * A custom Deployment Configuration for an EC2/on-premise Deployment Group.
 *
 * @resource AWS::CodeDeploy::DeploymentConfig
 */
class ServerDeploymentConfig extends base_deployment_config_1.BaseDeploymentConfig {
    constructor(scope, id, props) {
        super(scope, id, props);
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_codedeploy_ServerDeploymentConfigProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, ServerDeploymentConfig);
            }
            throw error;
        }
    }
    /**
     * Import a custom Deployment Configuration for an EC2/on-premise Deployment Group defined either outside the CDK app,
     * or in a different region.
     *
     * @param scope the parent Construct for this new Construct
     * @param id the logical ID of this new Construct
     * @param serverDeploymentConfigName the properties of the referenced custom Deployment Configuration
     * @returns a Construct representing a reference to an existing custom Deployment Configuration
     */
    static fromServerDeploymentConfigName(scope, id, serverDeploymentConfigName) {
        return this.fromDeploymentConfigName(scope, id, serverDeploymentConfigName);
    }
    static deploymentConfig(name) {
        return utils_1.deploymentConfig(name);
    }
}
exports.ServerDeploymentConfig = ServerDeploymentConfig;
_a = JSII_RTTI_SYMBOL_1;
ServerDeploymentConfig[_a] = { fqn: "@aws-cdk/aws-codedeploy.ServerDeploymentConfig", version: "0.0.0" };
/**
 * The CodeDeployDefault.OneAtATime predefined deployment configuration for EC2/on-premises compute platform
 *
 * @see https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html#deployment-configuration-server
 */
ServerDeploymentConfig.ONE_AT_A_TIME = ServerDeploymentConfig.deploymentConfig('CodeDeployDefault.OneAtATime');
/**
 * The CodeDeployDefault.HalfAtATime predefined deployment configuration for EC2/on-premises compute platform
 *
 * @see https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html#deployment-configuration-server
 */
ServerDeploymentConfig.HALF_AT_A_TIME = ServerDeploymentConfig.deploymentConfig('CodeDeployDefault.HalfAtATime');
/**
 * The CodeDeployDefault.AllAtOnce predefined deployment configuration for EC2/on-premises compute platform
 *
 * @see https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html#deployment-configuration-server
 */
ServerDeploymentConfig.ALL_AT_ONCE = ServerDeploymentConfig.deploymentConfig('CodeDeployDefault.AllAtOnce');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95bWVudC1jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZXBsb3ltZW50LWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxzRUFBcUg7QUFFckgsNENBQW9EO0FBc0JwRDs7OztHQUlHO0FBQ0gsTUFBYSxzQkFBdUIsU0FBUSw2Q0FBb0I7SUF3QzlELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBa0M7UUFDMUUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7Ozs7OzsrQ0F6Q2Ysc0JBQXNCOzs7O0tBMENoQztJQXRCRDs7Ozs7Ozs7T0FRRztJQUNJLE1BQU0sQ0FBQyw4QkFBOEIsQ0FDMUMsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLDBCQUFrQztRQUNsQyxPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLDBCQUEwQixDQUFDLENBQUM7S0FDN0U7SUFFTyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBWTtRQUMxQyxPQUFPLHdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0tBQy9COztBQXRDSCx3REEyQ0M7OztBQTFDQzs7OztHQUlHO0FBQ29CLG9DQUFhLEdBQUcsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsOEJBQThCLENBQUMsQ0FBQztBQUMvRzs7OztHQUlHO0FBQ29CLHFDQUFjLEdBQUcsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQUNqSDs7OztHQUlHO0FBQ29CLGtDQUFXLEdBQUcsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUMsNkJBQTZCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQmFzZURlcGxveW1lbnRDb25maWcsIEJhc2VEZXBsb3ltZW50Q29uZmlnT3B0aW9ucywgSUJhc2VEZXBsb3ltZW50Q29uZmlnIH0gZnJvbSAnLi4vYmFzZS1kZXBsb3ltZW50LWNvbmZpZyc7XG5pbXBvcnQgeyBNaW5pbXVtSGVhbHRoeUhvc3RzIH0gZnJvbSAnLi4vaG9zdC1oZWFsdGgtY29uZmlnJztcbmltcG9ydCB7IGRlcGxveW1lbnRDb25maWcgfSBmcm9tICcuLi9wcml2YXRlL3V0aWxzJztcblxuLyoqXG4gKiBUaGUgRGVwbG95bWVudCBDb25maWd1cmF0aW9uIG9mIGFuIEVDMi9vbi1wcmVtaXNlIERlcGxveW1lbnQgR3JvdXAuXG4gKiBUaGUgZGVmYXVsdCwgcHJlLWRlZmluZWQgQ29uZmlndXJhdGlvbnMgYXJlIGF2YWlsYWJsZSBhcyBjb25zdGFudHMgb24gdGhlIGBTZXJ2ZXJEZXBsb3ltZW50Q29uZmlnYCBjbGFzc1xuICogKGBTZXJ2ZXJEZXBsb3ltZW50Q29uZmlnLkhBTEZfQVRfQV9USU1FYCwgYFNlcnZlckRlcGxveW1lbnRDb25maWcuQUxMX0FUX09OQ0VgLCBldGMuKS5cbiAqIFRvIGNyZWF0ZSBhIGN1c3RvbSBEZXBsb3ltZW50IENvbmZpZ3VyYXRpb24sXG4gKiBpbnN0YW50aWF0ZSB0aGUgYFNlcnZlckRlcGxveW1lbnRDb25maWdgIENvbnN0cnVjdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJU2VydmVyRGVwbG95bWVudENvbmZpZyBleHRlbmRzIElCYXNlRGVwbG95bWVudENvbmZpZyB7XG59XG5cbi8qKlxuICogQ29uc3RydWN0aW9uIHByb3BlcnRpZXMgb2YgYFNlcnZlckRlcGxveW1lbnRDb25maWdgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZlckRlcGxveW1lbnRDb25maWdQcm9wcyBleHRlbmRzIEJhc2VEZXBsb3ltZW50Q29uZmlnT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiBoZWFsdGh5IGhvc3RzLlxuICAgKi9cbiAgcmVhZG9ubHkgbWluaW11bUhlYWx0aHlIb3N0czogTWluaW11bUhlYWx0aHlIb3N0cztcbn1cblxuLyoqXG4gKiBBIGN1c3RvbSBEZXBsb3ltZW50IENvbmZpZ3VyYXRpb24gZm9yIGFuIEVDMi9vbi1wcmVtaXNlIERlcGxveW1lbnQgR3JvdXAuXG4gKlxuICogQHJlc291cmNlIEFXUzo6Q29kZURlcGxveTo6RGVwbG95bWVudENvbmZpZ1xuICovXG5leHBvcnQgY2xhc3MgU2VydmVyRGVwbG95bWVudENvbmZpZyBleHRlbmRzIEJhc2VEZXBsb3ltZW50Q29uZmlnIGltcGxlbWVudHMgSVNlcnZlckRlcGxveW1lbnRDb25maWcge1xuICAvKipcbiAgICogVGhlIENvZGVEZXBsb3lEZWZhdWx0Lk9uZUF0QVRpbWUgcHJlZGVmaW5lZCBkZXBsb3ltZW50IGNvbmZpZ3VyYXRpb24gZm9yIEVDMi9vbi1wcmVtaXNlcyBjb21wdXRlIHBsYXRmb3JtXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2NvZGVkZXBsb3kvbGF0ZXN0L3VzZXJndWlkZS9kZXBsb3ltZW50LWNvbmZpZ3VyYXRpb25zLmh0bWwjZGVwbG95bWVudC1jb25maWd1cmF0aW9uLXNlcnZlclxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBPTkVfQVRfQV9USU1FID0gU2VydmVyRGVwbG95bWVudENvbmZpZy5kZXBsb3ltZW50Q29uZmlnKCdDb2RlRGVwbG95RGVmYXVsdC5PbmVBdEFUaW1lJyk7XG4gIC8qKlxuICAgKiBUaGUgQ29kZURlcGxveURlZmF1bHQuSGFsZkF0QVRpbWUgcHJlZGVmaW5lZCBkZXBsb3ltZW50IGNvbmZpZ3VyYXRpb24gZm9yIEVDMi9vbi1wcmVtaXNlcyBjb21wdXRlIHBsYXRmb3JtXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2NvZGVkZXBsb3kvbGF0ZXN0L3VzZXJndWlkZS9kZXBsb3ltZW50LWNvbmZpZ3VyYXRpb25zLmh0bWwjZGVwbG95bWVudC1jb25maWd1cmF0aW9uLXNlcnZlclxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBIQUxGX0FUX0FfVElNRSA9IFNlcnZlckRlcGxveW1lbnRDb25maWcuZGVwbG95bWVudENvbmZpZygnQ29kZURlcGxveURlZmF1bHQuSGFsZkF0QVRpbWUnKTtcbiAgLyoqXG4gICAqIFRoZSBDb2RlRGVwbG95RGVmYXVsdC5BbGxBdE9uY2UgcHJlZGVmaW5lZCBkZXBsb3ltZW50IGNvbmZpZ3VyYXRpb24gZm9yIEVDMi9vbi1wcmVtaXNlcyBjb21wdXRlIHBsYXRmb3JtXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2NvZGVkZXBsb3kvbGF0ZXN0L3VzZXJndWlkZS9kZXBsb3ltZW50LWNvbmZpZ3VyYXRpb25zLmh0bWwjZGVwbG95bWVudC1jb25maWd1cmF0aW9uLXNlcnZlclxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBBTExfQVRfT05DRSA9IFNlcnZlckRlcGxveW1lbnRDb25maWcuZGVwbG95bWVudENvbmZpZygnQ29kZURlcGxveURlZmF1bHQuQWxsQXRPbmNlJyk7XG5cbiAgLyoqXG4gICAqIEltcG9ydCBhIGN1c3RvbSBEZXBsb3ltZW50IENvbmZpZ3VyYXRpb24gZm9yIGFuIEVDMi9vbi1wcmVtaXNlIERlcGxveW1lbnQgR3JvdXAgZGVmaW5lZCBlaXRoZXIgb3V0c2lkZSB0aGUgQ0RLIGFwcCxcbiAgICogb3IgaW4gYSBkaWZmZXJlbnQgcmVnaW9uLlxuICAgKlxuICAgKiBAcGFyYW0gc2NvcGUgdGhlIHBhcmVudCBDb25zdHJ1Y3QgZm9yIHRoaXMgbmV3IENvbnN0cnVjdFxuICAgKiBAcGFyYW0gaWQgdGhlIGxvZ2ljYWwgSUQgb2YgdGhpcyBuZXcgQ29uc3RydWN0XG4gICAqIEBwYXJhbSBzZXJ2ZXJEZXBsb3ltZW50Q29uZmlnTmFtZSB0aGUgcHJvcGVydGllcyBvZiB0aGUgcmVmZXJlbmNlZCBjdXN0b20gRGVwbG95bWVudCBDb25maWd1cmF0aW9uXG4gICAqIEByZXR1cm5zIGEgQ29uc3RydWN0IHJlcHJlc2VudGluZyBhIHJlZmVyZW5jZSB0byBhbiBleGlzdGluZyBjdXN0b20gRGVwbG95bWVudCBDb25maWd1cmF0aW9uXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZyb21TZXJ2ZXJEZXBsb3ltZW50Q29uZmlnTmFtZShcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgc2VydmVyRGVwbG95bWVudENvbmZpZ05hbWU6IHN0cmluZyk6IElTZXJ2ZXJEZXBsb3ltZW50Q29uZmlnIHtcbiAgICByZXR1cm4gdGhpcy5mcm9tRGVwbG95bWVudENvbmZpZ05hbWUoc2NvcGUsIGlkLCBzZXJ2ZXJEZXBsb3ltZW50Q29uZmlnTmFtZSk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBkZXBsb3ltZW50Q29uZmlnKG5hbWU6IHN0cmluZyk6IElTZXJ2ZXJEZXBsb3ltZW50Q29uZmlnIHtcbiAgICByZXR1cm4gZGVwbG95bWVudENvbmZpZyhuYW1lKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTZXJ2ZXJEZXBsb3ltZW50Q29uZmlnUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcbiAgfVxufVxuIl19