"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iam = require("@aws-cdk/aws-iam");
const s3 = require("@aws-cdk/aws-s3");
const core_1 = require("@aws-cdk/core");
const integ = require("@aws-cdk/integ-tests");
const cloudtrail = require("../lib");
const app = new core_1.App();
const stack = new core_1.Stack(app, 'aws-cdk-cloudtrail-inshights-test');
const cloudTrailPrincipal = new iam.ServicePrincipal('cloudtrail.amazonaws.com');
const Trailbucket = new s3.Bucket(stack, 'S3', {
    encryption: s3.BucketEncryption.UNENCRYPTED,
    removalPolicy: core_1.RemovalPolicy.DESTROY,
    autoDeleteObjects: true,
});
Trailbucket.addToResourcePolicy(new iam.PolicyStatement({
    resources: [Trailbucket.bucketArn],
    actions: ['s3:GetBucketAcl'],
    principals: [cloudTrailPrincipal],
}));
Trailbucket.addToResourcePolicy(new iam.PolicyStatement({
    resources: [Trailbucket.arnForObjects(`AWSLogs/${core_1.Stack.of(stack).account}/*`)],
    actions: ['s3:PutObject'],
    principals: [cloudTrailPrincipal],
    conditions: {
        StringEquals: { 's3:x-amz-acl': 'bucket-owner-full-control' },
    },
}));
new cloudtrail.Trail(stack, 'Trail', {
    bucket: Trailbucket,
    insightTypes: [
        cloudtrail.InsightType.API_CALL_RATE,
        cloudtrail.InsightType.API_ERROR_RATE,
    ],
});
new integ.IntegTest(app, 'aws-cdk-cloudtrail-inshights', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuY2xvdWR0cmFpbC1pbnNpZ2h0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcuY2xvdWR0cmFpbC1pbnNpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQXdDO0FBQ3hDLHNDQUFzQztBQUN0Qyx3Q0FBMEQ7QUFDMUQsOENBQThDO0FBRTlDLHFDQUFxQztBQUVyQyxNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQUcsRUFBRSxDQUFDO0FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksWUFBSyxDQUFDLEdBQUcsRUFBRSxtQ0FBbUMsQ0FBQyxDQUFDO0FBRWxFLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUVqRixNQUFNLFdBQVcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRTtJQUM3QyxVQUFVLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFdBQVc7SUFDM0MsYUFBYSxFQUFFLG9CQUFhLENBQUMsT0FBTztJQUNwQyxpQkFBaUIsRUFBRSxJQUFJO0NBQ3hCLENBQUMsQ0FBQztBQUVILFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7SUFDdEQsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQztJQUNsQyxPQUFPLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztJQUM1QixVQUFVLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztDQUNsQyxDQUFDLENBQUMsQ0FBQztBQUVKLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7SUFDdEQsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxXQUFXLFlBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQztJQUM5RSxPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUM7SUFDekIsVUFBVSxFQUFFLENBQUMsbUJBQW1CLENBQUM7SUFDakMsVUFBVSxFQUFFO1FBQ1YsWUFBWSxFQUFFLEVBQUUsY0FBYyxFQUFFLDJCQUEyQixFQUFFO0tBQzlEO0NBQ0YsQ0FBQyxDQUFDLENBQUM7QUFFSixJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtJQUNuQyxNQUFNLEVBQUUsV0FBVztJQUNuQixZQUFZLEVBQUU7UUFDWixVQUFVLENBQUMsV0FBVyxDQUFDLGFBQWE7UUFDcEMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxjQUFjO0tBQ3RDO0NBQ0YsQ0FBQyxDQUFDO0FBR0gsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSw4QkFBOEIsRUFBRTtJQUN2RCxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7Q0FDbkIsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaWFtIGZyb20gJ0Bhd3MtY2RrL2F3cy1pYW0nO1xuaW1wb3J0ICogYXMgczMgZnJvbSAnQGF3cy1jZGsvYXdzLXMzJztcbmltcG9ydCB7IEFwcCwgUmVtb3ZhbFBvbGljeSwgU3RhY2sgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCAqIGFzIGludGVnIGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzJztcblxuaW1wb3J0ICogYXMgY2xvdWR0cmFpbCBmcm9tICcuLi9saWInO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5jb25zdCBzdGFjayA9IG5ldyBTdGFjayhhcHAsICdhd3MtY2RrLWNsb3VkdHJhaWwtaW5zaGlnaHRzLXRlc3QnKTtcblxuY29uc3QgY2xvdWRUcmFpbFByaW5jaXBhbCA9IG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnY2xvdWR0cmFpbC5hbWF6b25hd3MuY29tJyk7XG5cbmNvbnN0IFRyYWlsYnVja2V0ID0gbmV3IHMzLkJ1Y2tldChzdGFjaywgJ1MzJywge1xuICBlbmNyeXB0aW9uOiBzMy5CdWNrZXRFbmNyeXB0aW9uLlVORU5DUllQVEVELFxuICByZW1vdmFsUG9saWN5OiBSZW1vdmFsUG9saWN5LkRFU1RST1ksXG4gIGF1dG9EZWxldGVPYmplY3RzOiB0cnVlLFxufSk7XG5cblRyYWlsYnVja2V0LmFkZFRvUmVzb3VyY2VQb2xpY3kobmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICByZXNvdXJjZXM6IFtUcmFpbGJ1Y2tldC5idWNrZXRBcm5dLFxuICBhY3Rpb25zOiBbJ3MzOkdldEJ1Y2tldEFjbCddLFxuICBwcmluY2lwYWxzOiBbY2xvdWRUcmFpbFByaW5jaXBhbF0sXG59KSk7XG5cblRyYWlsYnVja2V0LmFkZFRvUmVzb3VyY2VQb2xpY3kobmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICByZXNvdXJjZXM6IFtUcmFpbGJ1Y2tldC5hcm5Gb3JPYmplY3RzKGBBV1NMb2dzLyR7U3RhY2sub2Yoc3RhY2spLmFjY291bnR9LypgKV0sXG4gIGFjdGlvbnM6IFsnczM6UHV0T2JqZWN0J10sXG4gIHByaW5jaXBhbHM6IFtjbG91ZFRyYWlsUHJpbmNpcGFsXSxcbiAgY29uZGl0aW9uczoge1xuICAgIFN0cmluZ0VxdWFsczogeyAnczM6eC1hbXotYWNsJzogJ2J1Y2tldC1vd25lci1mdWxsLWNvbnRyb2wnIH0sXG4gIH0sXG59KSk7XG5cbm5ldyBjbG91ZHRyYWlsLlRyYWlsKHN0YWNrLCAnVHJhaWwnLCB7XG4gIGJ1Y2tldDogVHJhaWxidWNrZXQsXG4gIGluc2lnaHRUeXBlczogW1xuICAgIGNsb3VkdHJhaWwuSW5zaWdodFR5cGUuQVBJX0NBTExfUkFURSxcbiAgICBjbG91ZHRyYWlsLkluc2lnaHRUeXBlLkFQSV9FUlJPUl9SQVRFLFxuICBdLFxufSk7XG5cblxubmV3IGludGVnLkludGVnVGVzdChhcHAsICdhd3MtY2RrLWNsb3VkdHJhaWwtaW5zaGlnaHRzJywge1xuICB0ZXN0Q2FzZXM6IFtzdGFja10sXG59KTtcblxuYXBwLnN5bnRoKCk7XG4iXX0=