"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const scaling = require("@aws-cdk/aws-autoscaling");
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
const aws_sqs_1 = require("@aws-cdk/aws-sqs");
const aws_ssm_1 = require("@aws-cdk/aws-ssm");
const cdk = require("@aws-cdk/core");
const integ_tests_1 = require("@aws-cdk/integ-tests");
const lib_1 = require("../lib");
const app = new cdk.App();
class TestStack extends cdk.Stack {
    constructor(scope, id) {
        super(scope, id);
        const queue = new aws_sqs_1.Queue(this, 'HookQueue');
        this.queueUrl = queue.queueUrl;
        const group = new scaling.AutoScalingGroup(this, 'Group', {
            vpc: new aws_ec2_1.Vpc(this, 'Vpc'),
            maxCapacity: 1,
            minCapacity: 0,
            instanceType: aws_ec2_1.InstanceType.of(aws_ec2_1.InstanceClass.T3, aws_ec2_1.InstanceSize.SMALL),
            machineImage: {
                getImage: () => {
                    return {
                        osType: aws_ec2_1.OperatingSystemType.LINUX,
                        userData: aws_ec2_1.UserData.forLinux(),
                        imageId: aws_ssm_1.StringParameter.fromStringParameterName(this, 'al2022AMI', '/aws/service/ami-amazon-linux-latest/al2022-ami-kernel-default-x86_64').stringValue,
                    };
                },
            },
        });
        this.groupName = group.autoScalingGroupName;
        const hook = group.addLifecycleHook('scaleout', {
            lifecycleTransition: scaling.LifecycleTransition.INSTANCE_LAUNCHING,
            notificationTarget: new lib_1.QueueHook(queue),
        });
        this.hookName = hook.lifecycleHookName;
    }
}
const testCase = new TestStack(app, 'integ-autoscalinghook-queue');
const integ = new integ_tests_1.IntegTest(app, 'queue-hook-test', {
    testCases: [testCase],
});
const setDesired = integ.assertions.awsApiCall('AutoScaling', 'setDesiredCapacity', {
    AutoScalingGroupName: testCase.groupName,
    DesiredCapacity: 1,
});
const message = integ.assertions.awsApiCall('SQS', 'receiveMessage', {
    QueueUrl: testCase.queueUrl,
});
message.assertAtPath('Messages.0.Body.LifecycleTransition', integ_tests_1.ExpectedResult.stringLikeRegexp('autoscaling:EC2_INSTANCE_LAUNCHING')).waitForAssertions();
const token = message.getAttString('Messages.0.Body.LifecycleActionToken');
const completeAction = integ.assertions.awsApiCall('AutoScaling', 'completeLifecycleAction', {
    AutoScalingGroupName: testCase.groupName,
    LifecycleActionResult: 'CONTINUE',
    LifecycleActionToken: token,
    LifecycleHookName: testCase.hookName,
});
setDesired.next(message.next(completeAction));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcucXVldWUtaG9vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLnF1ZXVlLWhvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvREFBb0Q7QUFDcEQsOENBQWlIO0FBQ2pILDhDQUF5QztBQUN6Qyw4Q0FBbUQ7QUFDbkQscUNBQXFDO0FBQ3JDLHNEQUFpRTtBQUVqRSxnQ0FBbUM7QUFFbkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsTUFBTSxTQUFVLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFJL0IsWUFBWSxLQUFnQixFQUFFLEVBQVU7UUFDdEMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLEtBQUssR0FBRyxJQUFJLGVBQUssQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQy9CLE1BQU0sS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxPQUFPLEVBQUU7WUFDeEQsR0FBRyxFQUFFLElBQUksYUFBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7WUFDekIsV0FBVyxFQUFFLENBQUM7WUFDZCxXQUFXLEVBQUUsQ0FBQztZQUNkLFlBQVksRUFBRSxzQkFBWSxDQUFDLEVBQUUsQ0FBQyx1QkFBYSxDQUFDLEVBQUUsRUFBRSxzQkFBWSxDQUFDLEtBQUssQ0FBQztZQUNuRSxZQUFZLEVBQUU7Z0JBQ1osUUFBUSxFQUFFLEdBQUcsRUFBRTtvQkFDYixPQUFPO3dCQUNMLE1BQU0sRUFBRSw2QkFBbUIsQ0FBQyxLQUFLO3dCQUNqQyxRQUFRLEVBQUUsa0JBQVEsQ0FBQyxRQUFRLEVBQUU7d0JBQzdCLE9BQU8sRUFBRSx5QkFBZSxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsdUVBQXVFLENBQUMsQ0FBQyxXQUFXO3FCQUN6SixDQUFDO2dCQUNKLENBQUM7YUFDRjtTQUNGLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLG9CQUFvQixDQUFDO1FBQzVDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUU7WUFDOUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQjtZQUNuRSxrQkFBa0IsRUFBRSxJQUFJLGVBQVMsQ0FBQyxLQUFLLENBQUM7U0FDekMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7S0FFeEM7Q0FDRjtBQUVELE1BQU0sUUFBUSxHQUFHLElBQUksU0FBUyxDQUFDLEdBQUcsRUFBRSw2QkFBNkIsQ0FBQyxDQUFDO0FBQ25FLE1BQU0sS0FBSyxHQUFHLElBQUksdUJBQVMsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQUU7SUFDbEQsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDO0NBQ3RCLENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxvQkFBb0IsRUFBRTtJQUNsRixvQkFBb0IsRUFBRSxRQUFRLENBQUMsU0FBUztJQUN4QyxlQUFlLEVBQUUsQ0FBQztDQUNuQixDQUFDLENBQUM7QUFHSCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUU7SUFDbkUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRO0NBQzVCLENBQUMsQ0FBQztBQUNILE9BQU8sQ0FBQyxZQUFZLENBQ2xCLHFDQUFxQyxFQUNyQyw0QkFBYyxDQUFDLGdCQUFnQixDQUFDLG9DQUFvQyxDQUFDLENBQ3RFLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztBQUV0QixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLHNDQUFzQyxDQUFDLENBQUM7QUFFM0UsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLHlCQUF5QixFQUFFO0lBQzNGLG9CQUFvQixFQUFFLFFBQVEsQ0FBQyxTQUFTO0lBQ3hDLHFCQUFxQixFQUFFLFVBQVU7SUFDakMsb0JBQW9CLEVBQUUsS0FBSztJQUMzQixpQkFBaUIsRUFBRSxRQUFRLENBQUMsUUFBUTtDQUNyQyxDQUFDLENBQUM7QUFFSCxVQUFVLENBQUMsSUFBSSxDQUNiLE9BQU8sQ0FBQyxJQUFJLENBQ1YsY0FBYyxDQUNmLENBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHNjYWxpbmcgZnJvbSAnQGF3cy1jZGsvYXdzLWF1dG9zY2FsaW5nJztcbmltcG9ydCB7IFZwYywgSW5zdGFuY2VUeXBlLCBJbnN0YW5jZUNsYXNzLCBJbnN0YW5jZVNpemUsIE9wZXJhdGluZ1N5c3RlbVR5cGUsIFVzZXJEYXRhIH0gZnJvbSAnQGF3cy1jZGsvYXdzLWVjMic7XG5pbXBvcnQgeyBRdWV1ZSB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1zcXMnO1xuaW1wb3J0IHsgU3RyaW5nUGFyYW1ldGVyIH0gZnJvbSAnQGF3cy1jZGsvYXdzLXNzbSc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBJbnRlZ1Rlc3QsIEV4cGVjdGVkUmVzdWx0IH0gZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgeyBRdWV1ZUhvb2sgfSBmcm9tICcuLi9saWInO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jbGFzcyBUZXN0U3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICBwdWJsaWMgcmVhZG9ubHkgcXVldWVVcmw6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IGdyb3VwTmFtZTogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgaG9va05hbWU6IHN0cmluZztcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBjb25zdCBxdWV1ZSA9IG5ldyBRdWV1ZSh0aGlzLCAnSG9va1F1ZXVlJyk7XG4gICAgdGhpcy5xdWV1ZVVybCA9IHF1ZXVlLnF1ZXVlVXJsO1xuICAgIGNvbnN0IGdyb3VwID0gbmV3IHNjYWxpbmcuQXV0b1NjYWxpbmdHcm91cCh0aGlzLCAnR3JvdXAnLCB7XG4gICAgICB2cGM6IG5ldyBWcGModGhpcywgJ1ZwYycpLFxuICAgICAgbWF4Q2FwYWNpdHk6IDEsXG4gICAgICBtaW5DYXBhY2l0eTogMCxcbiAgICAgIGluc3RhbmNlVHlwZTogSW5zdGFuY2VUeXBlLm9mKEluc3RhbmNlQ2xhc3MuVDMsIEluc3RhbmNlU2l6ZS5TTUFMTCksXG4gICAgICBtYWNoaW5lSW1hZ2U6IHtcbiAgICAgICAgZ2V0SW1hZ2U6ICgpID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3NUeXBlOiBPcGVyYXRpbmdTeXN0ZW1UeXBlLkxJTlVYLFxuICAgICAgICAgICAgdXNlckRhdGE6IFVzZXJEYXRhLmZvckxpbnV4KCksXG4gICAgICAgICAgICBpbWFnZUlkOiBTdHJpbmdQYXJhbWV0ZXIuZnJvbVN0cmluZ1BhcmFtZXRlck5hbWUodGhpcywgJ2FsMjAyMkFNSScsICcvYXdzL3NlcnZpY2UvYW1pLWFtYXpvbi1saW51eC1sYXRlc3QvYWwyMDIyLWFtaS1rZXJuZWwtZGVmYXVsdC14ODZfNjQnKS5zdHJpbmdWYWx1ZSxcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgICB0aGlzLmdyb3VwTmFtZSA9IGdyb3VwLmF1dG9TY2FsaW5nR3JvdXBOYW1lO1xuICAgIGNvbnN0IGhvb2sgPSBncm91cC5hZGRMaWZlY3ljbGVIb29rKCdzY2FsZW91dCcsIHtcbiAgICAgIGxpZmVjeWNsZVRyYW5zaXRpb246IHNjYWxpbmcuTGlmZWN5Y2xlVHJhbnNpdGlvbi5JTlNUQU5DRV9MQVVOQ0hJTkcsXG4gICAgICBub3RpZmljYXRpb25UYXJnZXQ6IG5ldyBRdWV1ZUhvb2socXVldWUpLFxuICAgIH0pO1xuICAgIHRoaXMuaG9va05hbWUgPSBob29rLmxpZmVjeWNsZUhvb2tOYW1lO1xuXG4gIH1cbn1cblxuY29uc3QgdGVzdENhc2UgPSBuZXcgVGVzdFN0YWNrKGFwcCwgJ2ludGVnLWF1dG9zY2FsaW5naG9vay1xdWV1ZScpO1xuY29uc3QgaW50ZWcgPSBuZXcgSW50ZWdUZXN0KGFwcCwgJ3F1ZXVlLWhvb2stdGVzdCcsIHtcbiAgdGVzdENhc2VzOiBbdGVzdENhc2VdLFxufSk7XG5cbmNvbnN0IHNldERlc2lyZWQgPSBpbnRlZy5hc3NlcnRpb25zLmF3c0FwaUNhbGwoJ0F1dG9TY2FsaW5nJywgJ3NldERlc2lyZWRDYXBhY2l0eScsIHtcbiAgQXV0b1NjYWxpbmdHcm91cE5hbWU6IHRlc3RDYXNlLmdyb3VwTmFtZSxcbiAgRGVzaXJlZENhcGFjaXR5OiAxLFxufSk7XG5cblxuY29uc3QgbWVzc2FnZSA9IGludGVnLmFzc2VydGlvbnMuYXdzQXBpQ2FsbCgnU1FTJywgJ3JlY2VpdmVNZXNzYWdlJywge1xuICBRdWV1ZVVybDogdGVzdENhc2UucXVldWVVcmwsXG59KTtcbm1lc3NhZ2UuYXNzZXJ0QXRQYXRoKFxuICAnTWVzc2FnZXMuMC5Cb2R5LkxpZmVjeWNsZVRyYW5zaXRpb24nLFxuICBFeHBlY3RlZFJlc3VsdC5zdHJpbmdMaWtlUmVnZXhwKCdhdXRvc2NhbGluZzpFQzJfSU5TVEFOQ0VfTEFVTkNISU5HJyksXG4pLndhaXRGb3JBc3NlcnRpb25zKCk7XG5cbmNvbnN0IHRva2VuID0gbWVzc2FnZS5nZXRBdHRTdHJpbmcoJ01lc3NhZ2VzLjAuQm9keS5MaWZlY3ljbGVBY3Rpb25Ub2tlbicpO1xuXG5jb25zdCBjb21wbGV0ZUFjdGlvbiA9IGludGVnLmFzc2VydGlvbnMuYXdzQXBpQ2FsbCgnQXV0b1NjYWxpbmcnLCAnY29tcGxldGVMaWZlY3ljbGVBY3Rpb24nLCB7XG4gIEF1dG9TY2FsaW5nR3JvdXBOYW1lOiB0ZXN0Q2FzZS5ncm91cE5hbWUsXG4gIExpZmVjeWNsZUFjdGlvblJlc3VsdDogJ0NPTlRJTlVFJyxcbiAgTGlmZWN5Y2xlQWN0aW9uVG9rZW46IHRva2VuLFxuICBMaWZlY3ljbGVIb29rTmFtZTogdGVzdENhc2UuaG9va05hbWUsXG59KTtcblxuc2V0RGVzaXJlZC5uZXh0KFxuICBtZXNzYWdlLm5leHQoXG4gICAgY29tcGxldGVBY3Rpb24sXG4gICksXG4pO1xuIl19