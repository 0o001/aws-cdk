"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events = require("@aws-cdk/aws-events");
const logs = require("@aws-cdk/aws-logs");
const sqs = require("@aws-cdk/aws-sqs");
const cdk = require("@aws-cdk/core");
const integ_tests_1 = require("@aws-cdk/integ-tests");
const targets = require("../../lib");
const lib_1 = require("../../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'log-group-events');
const logGroup = new logs.LogGroup(stack, 'log-group', {
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
const logGroup2 = new logs.LogGroup(stack, 'log-group2', {
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
new logs.LogGroup(stack, 'log-group-imported', {
    logGroupName: 'MyLogGroupNameToBeImported',
    removalPolicy: cdk.RemovalPolicy.DESTROY,
});
const importedLogGroup = logs.LogGroup.fromLogGroupName(stack, 'imported-log-group', 'MyLogGroupNameToBeImported');
const timer = new events.Rule(stack, 'Timer', {
    schedule: events.Schedule.rate(cdk.Duration.minutes(1)),
});
timer.addTarget(new targets.CloudWatchLogGroup(logGroup));
const customRule = new events.Rule(stack, 'CustomRule', {
    eventPattern: {
        source: ['cdk-integ'],
        detailType: ['cdk-integ-custom-rule'],
    },
});
customRule.addTarget(new targets.CloudWatchLogGroup(logGroup2, {
    logEvent: lib_1.LogGroupTargetInput.fromObject({
        message: events.EventField.fromPath('$.detail.date'),
    }),
}));
const queue = new sqs.Queue(stack, 'dlq');
const timer3 = new events.Rule(stack, 'Timer3', {
    schedule: events.Schedule.rate(cdk.Duration.minutes(1)),
});
timer3.addTarget(new targets.CloudWatchLogGroup(importedLogGroup, {
    deadLetterQueue: queue,
    maxEventAge: cdk.Duration.hours(2),
    retryAttempts: 2,
}));
const integ = new integ_tests_1.IntegTest(app, 'LogGroup', {
    testCases: [stack],
});
const putEventsDate = Date.now().toString();
const expectedValue = `abc${putEventsDate}`;
const putEvent = integ.assertions.awsApiCall('EventBridge', 'putEvents', {
    Entries: [
        {
            Detail: JSON.stringify({
                date: expectedValue,
            }),
            DetailType: 'cdk-integ-custom-rule',
            Source: 'cdk-integ',
        },
    ],
});
putEvent.provider.addPolicyStatementFromSdkCall('events', 'PutEvents');
const logEvents = integ.assertions.awsApiCall('CloudWatchLogs', 'filterLogEvents', {
    logGroupName: logGroup2.logGroupName,
    startTime: putEventsDate,
    limit: 1,
});
putEvent.next(logEvents);
logEvents.assertAtPath('events.0.message', integ_tests_1.ExpectedResult.stringLikeRegexp(expectedValue));
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcubG9nLWdyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcubG9nLWdyb3VwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOENBQThDO0FBQzlDLDBDQUEwQztBQUMxQyx3Q0FBd0M7QUFDeEMscUNBQXFDO0FBQ3JDLHNEQUFpRTtBQUNqRSxxQ0FBcUM7QUFDckMsbUNBQWdEO0FBRWhELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztBQUVyRCxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRTtJQUNyRCxhQUFhLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPO0NBQ3pDLENBQUMsQ0FBQztBQUVILE1BQU0sU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFO0lBQ3ZELGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU87Q0FDekMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxvQkFBb0IsRUFBRTtJQUM3QyxZQUFZLEVBQUUsNEJBQTRCO0lBQzFDLGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU87Q0FDekMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxvQkFBb0IsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO0FBRW5ILE1BQU0sS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO0lBQzVDLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN4RCxDQUFDLENBQUM7QUFDSCxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksT0FBTyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFFMUQsTUFBTSxVQUFVLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUU7SUFDdEQsWUFBWSxFQUFFO1FBQ1osTUFBTSxFQUFFLENBQUMsV0FBVyxDQUFDO1FBQ3JCLFVBQVUsRUFBRSxDQUFDLHVCQUF1QixDQUFDO0tBQ3RDO0NBQ0YsQ0FBQyxDQUFDO0FBQ0gsVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUU7SUFDN0QsUUFBUSxFQUFFLHlCQUFtQixDQUFDLFVBQVUsQ0FBQztRQUN2QyxPQUFPLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDO0tBQ3JELENBQUM7Q0FDSCxDQUFDLENBQUMsQ0FBQztBQUVKLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFFMUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUU7SUFDOUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3hELENBQUMsQ0FBQztBQUNILE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxPQUFPLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLEVBQUU7SUFDaEUsZUFBZSxFQUFFLEtBQUs7SUFDdEIsV0FBVyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNsQyxhQUFhLEVBQUUsQ0FBQztDQUNqQixDQUFDLENBQUMsQ0FBQztBQUVKLE1BQU0sS0FBSyxHQUFHLElBQUksdUJBQVMsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFO0lBQzNDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQztDQUNuQixDQUFDLENBQUM7QUFFSCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDNUMsTUFBTSxhQUFhLEdBQUcsTUFBTSxhQUFhLEVBQUUsQ0FBQztBQUU1QyxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFO0lBQ3ZFLE9BQU8sRUFBRTtRQUNQO1lBQ0UsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ3JCLElBQUksRUFBRSxhQUFhO2FBQ3BCLENBQUM7WUFDRixVQUFVLEVBQUUsdUJBQXVCO1lBQ25DLE1BQU0sRUFBRSxXQUFXO1NBQ3BCO0tBQ0Y7Q0FDRixDQUFDLENBQUM7QUFDSCxRQUFRLENBQUMsUUFBUSxDQUFDLDZCQUE2QixDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUV2RSxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRTtJQUNqRixZQUFZLEVBQUUsU0FBUyxDQUFDLFlBQVk7SUFDcEMsU0FBUyxFQUFFLGFBQWE7SUFDeEIsS0FBSyxFQUFFLENBQUM7Q0FDVCxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRXpCLFNBQVMsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLEVBQUUsNEJBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBRTNGLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV2ZW50cyBmcm9tICdAYXdzLWNkay9hd3MtZXZlbnRzJztcbmltcG9ydCAqIGFzIGxvZ3MgZnJvbSAnQGF3cy1jZGsvYXdzLWxvZ3MnO1xuaW1wb3J0ICogYXMgc3FzIGZyb20gJ0Bhd3MtY2RrL2F3cy1zcXMnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgSW50ZWdUZXN0LCBFeHBlY3RlZFJlc3VsdCB9IGZyb20gJ0Bhd3MtY2RrL2ludGVnLXRlc3RzJztcbmltcG9ydCAqIGFzIHRhcmdldHMgZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCB7IExvZ0dyb3VwVGFyZ2V0SW5wdXQgfSBmcm9tICcuLi8uLi9saWInO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnbG9nLWdyb3VwLWV2ZW50cycpO1xuXG5jb25zdCBsb2dHcm91cCA9IG5ldyBsb2dzLkxvZ0dyb3VwKHN0YWNrLCAnbG9nLWdyb3VwJywge1xuICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxufSk7XG5cbmNvbnN0IGxvZ0dyb3VwMiA9IG5ldyBsb2dzLkxvZ0dyb3VwKHN0YWNrLCAnbG9nLWdyb3VwMicsIHtcbiAgcmVtb3ZhbFBvbGljeTogY2RrLlJlbW92YWxQb2xpY3kuREVTVFJPWSxcbn0pO1xuXG5uZXcgbG9ncy5Mb2dHcm91cChzdGFjaywgJ2xvZy1ncm91cC1pbXBvcnRlZCcsIHtcbiAgbG9nR3JvdXBOYW1lOiAnTXlMb2dHcm91cE5hbWVUb0JlSW1wb3J0ZWQnLFxuICByZW1vdmFsUG9saWN5OiBjZGsuUmVtb3ZhbFBvbGljeS5ERVNUUk9ZLFxufSk7XG5cbmNvbnN0IGltcG9ydGVkTG9nR3JvdXAgPSBsb2dzLkxvZ0dyb3VwLmZyb21Mb2dHcm91cE5hbWUoc3RhY2ssICdpbXBvcnRlZC1sb2ctZ3JvdXAnLCAnTXlMb2dHcm91cE5hbWVUb0JlSW1wb3J0ZWQnKTtcblxuY29uc3QgdGltZXIgPSBuZXcgZXZlbnRzLlJ1bGUoc3RhY2ssICdUaW1lcicsIHtcbiAgc2NoZWR1bGU6IGV2ZW50cy5TY2hlZHVsZS5yYXRlKGNkay5EdXJhdGlvbi5taW51dGVzKDEpKSxcbn0pO1xudGltZXIuYWRkVGFyZ2V0KG5ldyB0YXJnZXRzLkNsb3VkV2F0Y2hMb2dHcm91cChsb2dHcm91cCkpO1xuXG5jb25zdCBjdXN0b21SdWxlID0gbmV3IGV2ZW50cy5SdWxlKHN0YWNrLCAnQ3VzdG9tUnVsZScsIHtcbiAgZXZlbnRQYXR0ZXJuOiB7XG4gICAgc291cmNlOiBbJ2Nkay1pbnRlZyddLFxuICAgIGRldGFpbFR5cGU6IFsnY2RrLWludGVnLWN1c3RvbS1ydWxlJ10sXG4gIH0sXG59KTtcbmN1c3RvbVJ1bGUuYWRkVGFyZ2V0KG5ldyB0YXJnZXRzLkNsb3VkV2F0Y2hMb2dHcm91cChsb2dHcm91cDIsIHtcbiAgbG9nRXZlbnQ6IExvZ0dyb3VwVGFyZ2V0SW5wdXQuZnJvbU9iamVjdCh7XG4gICAgbWVzc2FnZTogZXZlbnRzLkV2ZW50RmllbGQuZnJvbVBhdGgoJyQuZGV0YWlsLmRhdGUnKSxcbiAgfSksXG59KSk7XG5cbmNvbnN0IHF1ZXVlID0gbmV3IHNxcy5RdWV1ZShzdGFjaywgJ2RscScpO1xuXG5jb25zdCB0aW1lcjMgPSBuZXcgZXZlbnRzLlJ1bGUoc3RhY2ssICdUaW1lcjMnLCB7XG4gIHNjaGVkdWxlOiBldmVudHMuU2NoZWR1bGUucmF0ZShjZGsuRHVyYXRpb24ubWludXRlcygxKSksXG59KTtcbnRpbWVyMy5hZGRUYXJnZXQobmV3IHRhcmdldHMuQ2xvdWRXYXRjaExvZ0dyb3VwKGltcG9ydGVkTG9nR3JvdXAsIHtcbiAgZGVhZExldHRlclF1ZXVlOiBxdWV1ZSxcbiAgbWF4RXZlbnRBZ2U6IGNkay5EdXJhdGlvbi5ob3VycygyKSxcbiAgcmV0cnlBdHRlbXB0czogMixcbn0pKTtcblxuY29uc3QgaW50ZWcgPSBuZXcgSW50ZWdUZXN0KGFwcCwgJ0xvZ0dyb3VwJywge1xuICB0ZXN0Q2FzZXM6IFtzdGFja10sXG59KTtcblxuY29uc3QgcHV0RXZlbnRzRGF0ZSA9IERhdGUubm93KCkudG9TdHJpbmcoKTtcbmNvbnN0IGV4cGVjdGVkVmFsdWUgPSBgYWJjJHtwdXRFdmVudHNEYXRlfWA7XG5cbmNvbnN0IHB1dEV2ZW50ID0gaW50ZWcuYXNzZXJ0aW9ucy5hd3NBcGlDYWxsKCdFdmVudEJyaWRnZScsICdwdXRFdmVudHMnLCB7XG4gIEVudHJpZXM6IFtcbiAgICB7XG4gICAgICBEZXRhaWw6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZGF0ZTogZXhwZWN0ZWRWYWx1ZSxcbiAgICAgIH0pLFxuICAgICAgRGV0YWlsVHlwZTogJ2Nkay1pbnRlZy1jdXN0b20tcnVsZScsXG4gICAgICBTb3VyY2U6ICdjZGstaW50ZWcnLFxuICAgIH0sXG4gIF0sXG59KTtcbnB1dEV2ZW50LnByb3ZpZGVyLmFkZFBvbGljeVN0YXRlbWVudEZyb21TZGtDYWxsKCdldmVudHMnLCAnUHV0RXZlbnRzJyk7XG5cbmNvbnN0IGxvZ0V2ZW50cyA9IGludGVnLmFzc2VydGlvbnMuYXdzQXBpQ2FsbCgnQ2xvdWRXYXRjaExvZ3MnLCAnZmlsdGVyTG9nRXZlbnRzJywge1xuICBsb2dHcm91cE5hbWU6IGxvZ0dyb3VwMi5sb2dHcm91cE5hbWUsXG4gIHN0YXJ0VGltZTogcHV0RXZlbnRzRGF0ZSxcbiAgbGltaXQ6IDEsXG59KTtcblxucHV0RXZlbnQubmV4dChsb2dFdmVudHMpO1xuXG5sb2dFdmVudHMuYXNzZXJ0QXRQYXRoKCdldmVudHMuMC5tZXNzYWdlJywgRXhwZWN0ZWRSZXN1bHQuc3RyaW5nTGlrZVJlZ2V4cChleHBlY3RlZFZhbHVlKSk7XG5cbmFwcC5zeW50aCgpO1xuIl19