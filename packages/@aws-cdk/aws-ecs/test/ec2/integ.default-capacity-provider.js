"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const autoscaling = require("@aws-cdk/aws-autoscaling");
const ec2 = require("@aws-cdk/aws-ec2");
const cdk = require("@aws-cdk/core");
const integ = require("@aws-cdk/integ-tests");
const ecs = require("../../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'integ-default-capacity-provider');
const vpc = new ec2.Vpc(stack, 'Vpc', { maxAzs: 2 });
const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef');
taskDefinition.addContainer('web', {
    image: ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),
    memoryReservationMiB: 256,
});
const autoScalingGroup = new autoscaling.AutoScalingGroup(stack, 'ASG', {
    vpc,
    instanceType: new ec2.InstanceType('t2.micro'),
    machineImage: ecs.EcsOptimizedImage.amazonLinux2(),
});
const cp = new ecs.AsgCapacityProvider(stack, 'EC2CapacityProvider', {
    autoScalingGroup,
    // This is to allow cdk destroy to work; otherwise deletion will hang bc ASG cannot be deleted
    enableManagedTerminationProtection: false,
});
const cluster = new ecs.Cluster(stack, 'EC2CPCluster', {
    vpc,
    enableFargateCapacityProviders: true,
});
cluster.addAsgCapacityProvider(cp);
cluster.addDefaultCapacityProviderStrategy([
    { capacityProvider: 'FARGATE', base: 1, weight: 1 },
    { capacityProvider: 'FARGATE_SPOT', weight: 1 },
]);
new ecs.Ec2Service(stack, 'EC2Service', {
    cluster,
    taskDefinition,
});
new integ.IntegTest(app, 'CapacityProviders', {
    testCases: [stack],
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuZGVmYXVsdC1jYXBhY2l0eS1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmRlZmF1bHQtY2FwYWNpdHktcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3REFBd0Q7QUFDeEQsd0NBQXdDO0FBQ3hDLHFDQUFxQztBQUNyQyw4Q0FBOEM7QUFDOUMsaUNBQWlDO0FBRWpDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQzFCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztBQUVwRSxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRXJELE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztBQUVuRSxjQUFjLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRTtJQUNqQyxLQUFLLEVBQUUsR0FBRyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsMEJBQTBCLENBQUM7SUFDbEUsb0JBQW9CLEVBQUUsR0FBRztDQUMxQixDQUFDLENBQUM7QUFFSCxNQUFNLGdCQUFnQixHQUFHLElBQUksV0FBVyxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUU7SUFDdEUsR0FBRztJQUNILFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDO0lBQzlDLFlBQVksRUFBRSxHQUFHLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFO0NBQ25ELENBQUMsQ0FBQztBQUVILE1BQU0sRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxxQkFBcUIsRUFBRTtJQUNuRSxnQkFBZ0I7SUFDaEIsOEZBQThGO0lBQzlGLGtDQUFrQyxFQUFFLEtBQUs7Q0FDMUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7SUFDckQsR0FBRztJQUNILDhCQUE4QixFQUFFLElBQUk7Q0FDckMsQ0FBQyxDQUFDO0FBRUgsT0FBTyxDQUFDLHNCQUFzQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ25DLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQztJQUN6QyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUU7SUFDbkQsRUFBRSxnQkFBZ0IsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRTtDQUNoRCxDQUFDLENBQUM7QUFHSCxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRTtJQUN0QyxPQUFPO0lBQ1AsY0FBYztDQUNmLENBQUMsQ0FBQztBQUNILElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUU7SUFDNUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO0NBQ25CLENBQUMsQ0FBQztBQUNILEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGF1dG9zY2FsaW5nIGZyb20gJ0Bhd3MtY2RrL2F3cy1hdXRvc2NhbGluZyc7XG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnQGF3cy1jZGsvYXdzLWVjMic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBpbnRlZyBmcm9tICdAYXdzLWNkay9pbnRlZy10ZXN0cyc7XG5pbXBvcnQgKiBhcyBlY3MgZnJvbSAnLi4vLi4vbGliJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdpbnRlZy1kZWZhdWx0LWNhcGFjaXR5LXByb3ZpZGVyJyk7XG5cbmNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHN0YWNrLCAnVnBjJywgeyBtYXhBenM6IDIgfSk7XG5cbmNvbnN0IHRhc2tEZWZpbml0aW9uID0gbmV3IGVjcy5FYzJUYXNrRGVmaW5pdGlvbihzdGFjaywgJ1Rhc2tEZWYnKTtcblxudGFza0RlZmluaXRpb24uYWRkQ29udGFpbmVyKCd3ZWInLCB7XG4gIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbVJlZ2lzdHJ5KCdhbWF6b24vYW1hem9uLWVjcy1zYW1wbGUnKSxcbiAgbWVtb3J5UmVzZXJ2YXRpb25NaUI6IDI1Nixcbn0pO1xuXG5jb25zdCBhdXRvU2NhbGluZ0dyb3VwID0gbmV3IGF1dG9zY2FsaW5nLkF1dG9TY2FsaW5nR3JvdXAoc3RhY2ssICdBU0cnLCB7XG4gIHZwYyxcbiAgaW5zdGFuY2VUeXBlOiBuZXcgZWMyLkluc3RhbmNlVHlwZSgndDIubWljcm8nKSxcbiAgbWFjaGluZUltYWdlOiBlY3MuRWNzT3B0aW1pemVkSW1hZ2UuYW1hem9uTGludXgyKCksXG59KTtcblxuY29uc3QgY3AgPSBuZXcgZWNzLkFzZ0NhcGFjaXR5UHJvdmlkZXIoc3RhY2ssICdFQzJDYXBhY2l0eVByb3ZpZGVyJywge1xuICBhdXRvU2NhbGluZ0dyb3VwLFxuICAvLyBUaGlzIGlzIHRvIGFsbG93IGNkayBkZXN0cm95IHRvIHdvcms7IG90aGVyd2lzZSBkZWxldGlvbiB3aWxsIGhhbmcgYmMgQVNHIGNhbm5vdCBiZSBkZWxldGVkXG4gIGVuYWJsZU1hbmFnZWRUZXJtaW5hdGlvblByb3RlY3Rpb246IGZhbHNlLFxufSk7XG5cbmNvbnN0IGNsdXN0ZXIgPSBuZXcgZWNzLkNsdXN0ZXIoc3RhY2ssICdFQzJDUENsdXN0ZXInLCB7XG4gIHZwYyxcbiAgZW5hYmxlRmFyZ2F0ZUNhcGFjaXR5UHJvdmlkZXJzOiB0cnVlLFxufSk7XG5cbmNsdXN0ZXIuYWRkQXNnQ2FwYWNpdHlQcm92aWRlcihjcCk7XG5jbHVzdGVyLmFkZERlZmF1bHRDYXBhY2l0eVByb3ZpZGVyU3RyYXRlZ3koW1xuICB7IGNhcGFjaXR5UHJvdmlkZXI6ICdGQVJHQVRFJywgYmFzZTogMSwgd2VpZ2h0OiAxIH0sXG4gIHsgY2FwYWNpdHlQcm92aWRlcjogJ0ZBUkdBVEVfU1BPVCcsIHdlaWdodDogMSB9LFxuXSk7XG5cblxubmV3IGVjcy5FYzJTZXJ2aWNlKHN0YWNrLCAnRUMyU2VydmljZScsIHtcbiAgY2x1c3RlcixcbiAgdGFza0RlZmluaXRpb24sXG59KTtcbm5ldyBpbnRlZy5JbnRlZ1Rlc3QoYXBwLCAnQ2FwYWNpdHlQcm92aWRlcnMnLCB7XG4gIHRlc3RDYXNlczogW3N0YWNrXSxcbn0pO1xuYXBwLnN5bnRoKCk7XG4iXX0=