"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ec2 = require("@aws-cdk/aws-ec2");
const cloudmap = require("@aws-cdk/aws-servicediscovery");
const cdk = require("@aws-cdk/core");
const ecs = require("../../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'aws-ecs-integ');
const vpc = new ec2.Vpc(stack, 'Vpc', {
    maxAzs: 2,
    subnetConfiguration: [
        {
            name: 'pub',
            cidrMask: 24,
            subnetType: ec2.SubnetType.PUBLIC,
        },
    ],
});
const cluster = new ecs.Cluster(stack, 'FargateCluster', { vpc });
const capacity = cluster.addCapacity('capacity', {
    instanceType: ec2.InstanceType.of(ec2.InstanceClass.T3, ec2.InstanceSize.MICRO),
    desiredCapacity: 1,
    minCapacity: 1,
    maxCapacity: 1,
});
capacity.connections.allowFromAnyIpv4(ec2.Port.tcpRange(32768, 61000));
cluster.addDefaultCloudMapNamespace({ name: 'aws-ecs-integ' });
const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef', {});
// Main container
const mainContainer = taskDefinition.addContainer('nginx', {
    image: ecs.ContainerImage.fromRegistry('nginx'),
    memoryReservationMiB: 32,
    memoryLimitMiB: 512,
});
mainContainer.addPortMappings({
    containerPort: 80,
    protocol: ecs.Protocol.TCP,
});
// Name container with SRV
const nameContainer = taskDefinition.addContainer('name', {
    image: ecs.ContainerImage.fromRegistry('nathanpeck/name'),
    environment: {
        PORT: '81',
    },
    memoryReservationMiB: 32,
    memoryLimitMiB: 512,
});
nameContainer.addPortMappings({
    containerPort: 81,
    protocol: ecs.Protocol.TCP,
});
new ecs.Ec2Service(stack, 'Service', {
    cluster,
    taskDefinition,
    desiredCount: 3,
    cloudMapOptions: {
        container: nameContainer,
        containerPort: 81,
        dnsRecordType: cloudmap.DnsRecordType.SRV,
    },
});
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuY2xvdWRtYXAtY29udGFpbmVyLXBvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlZy5jbG91ZG1hcC1jb250YWluZXItcG9ydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUF3QztBQUN4QywwREFBMEQ7QUFDMUQscUNBQXFDO0FBQ3JDLGlDQUFpQztBQUVqQyxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ2xELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO0lBQ3BDLE1BQU0sRUFBRSxDQUFDO0lBQ1QsbUJBQW1CLEVBQUU7UUFDbkI7WUFDRSxJQUFJLEVBQUUsS0FBSztZQUNYLFFBQVEsRUFBRSxFQUFFO1lBQ1osVUFBVSxFQUFFLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTTtTQUNsQztLQUNGO0NBQ0YsQ0FBQyxDQUFDO0FBQ0gsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFFbEUsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUU7SUFDL0MsWUFBWSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO0lBQy9FLGVBQWUsRUFBRSxDQUFDO0lBQ2xCLFdBQVcsRUFBRSxDQUFDO0lBQ2QsV0FBVyxFQUFFLENBQUM7Q0FDZixDQUFDLENBQUM7QUFDSCxRQUFRLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRXZFLE9BQU8sQ0FBQywyQkFBMkIsQ0FBQyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO0FBRS9ELE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFFdkUsaUJBQWlCO0FBQ2pCLE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFO0lBQ3pELEtBQUssRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUM7SUFDL0Msb0JBQW9CLEVBQUUsRUFBRTtJQUN4QixjQUFjLEVBQUUsR0FBRztDQUNwQixDQUFDLENBQUM7QUFFSCxhQUFhLENBQUMsZUFBZSxDQUFDO0lBQzVCLGFBQWEsRUFBRSxFQUFFO0lBQ2pCLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUc7Q0FDM0IsQ0FBQyxDQUFDO0FBRUgsMEJBQTBCO0FBQzFCLE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO0lBQ3hELEtBQUssRUFBRSxHQUFHLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQztJQUN6RCxXQUFXLEVBQUU7UUFDWCxJQUFJLEVBQUUsSUFBSTtLQUNYO0lBQ0Qsb0JBQW9CLEVBQUUsRUFBRTtJQUN4QixjQUFjLEVBQUUsR0FBRztDQUNwQixDQUFDLENBQUM7QUFFSCxhQUFhLENBQUMsZUFBZSxDQUFDO0lBQzVCLGFBQWEsRUFBRSxFQUFFO0lBQ2pCLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUc7Q0FDM0IsQ0FBQyxDQUFDO0FBRUgsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUU7SUFDbkMsT0FBTztJQUNQLGNBQWM7SUFDZCxZQUFZLEVBQUUsQ0FBQztJQUNmLGVBQWUsRUFBRTtRQUNmLFNBQVMsRUFBRSxhQUFhO1FBQ3hCLGFBQWEsRUFBRSxFQUFFO1FBQ2pCLGFBQWEsRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUc7S0FDMUM7Q0FDRixDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBlYzIgZnJvbSAnQGF3cy1jZGsvYXdzLWVjMic7XG5pbXBvcnQgKiBhcyBjbG91ZG1hcCBmcm9tICdAYXdzLWNkay9hd3Mtc2VydmljZWRpc2NvdmVyeSc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBlY3MgZnJvbSAnLi4vLi4vbGliJztcblxuY29uc3QgYXBwID0gbmV3IGNkay5BcHAoKTtcbmNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdhd3MtZWNzLWludGVnJyk7XG5jb25zdCB2cGMgPSBuZXcgZWMyLlZwYyhzdGFjaywgJ1ZwYycsIHtcbiAgbWF4QXpzOiAyLFxuICBzdWJuZXRDb25maWd1cmF0aW9uOiBbXG4gICAge1xuICAgICAgbmFtZTogJ3B1YicsXG4gICAgICBjaWRyTWFzazogMjQsXG4gICAgICBzdWJuZXRUeXBlOiBlYzIuU3VibmV0VHlwZS5QVUJMSUMsXG4gICAgfSxcbiAgXSxcbn0pO1xuY29uc3QgY2x1c3RlciA9IG5ldyBlY3MuQ2x1c3RlcihzdGFjaywgJ0ZhcmdhdGVDbHVzdGVyJywgeyB2cGMgfSk7XG5cbmNvbnN0IGNhcGFjaXR5ID0gY2x1c3Rlci5hZGRDYXBhY2l0eSgnY2FwYWNpdHknLCB7XG4gIGluc3RhbmNlVHlwZTogZWMyLkluc3RhbmNlVHlwZS5vZihlYzIuSW5zdGFuY2VDbGFzcy5UMywgZWMyLkluc3RhbmNlU2l6ZS5NSUNSTyksXG4gIGRlc2lyZWRDYXBhY2l0eTogMSxcbiAgbWluQ2FwYWNpdHk6IDEsXG4gIG1heENhcGFjaXR5OiAxLFxufSk7XG5jYXBhY2l0eS5jb25uZWN0aW9ucy5hbGxvd0Zyb21BbnlJcHY0KGVjMi5Qb3J0LnRjcFJhbmdlKDMyNzY4LCA2MTAwMCkpO1xuXG5jbHVzdGVyLmFkZERlZmF1bHRDbG91ZE1hcE5hbWVzcGFjZSh7IG5hbWU6ICdhd3MtZWNzLWludGVnJyB9KTtcblxuY29uc3QgdGFza0RlZmluaXRpb24gPSBuZXcgZWNzLkVjMlRhc2tEZWZpbml0aW9uKHN0YWNrLCAnVGFza0RlZicsIHt9KTtcblxuLy8gTWFpbiBjb250YWluZXJcbmNvbnN0IG1haW5Db250YWluZXIgPSB0YXNrRGVmaW5pdGlvbi5hZGRDb250YWluZXIoJ25naW54Jywge1xuICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnbmdpbngnKSxcbiAgbWVtb3J5UmVzZXJ2YXRpb25NaUI6IDMyLFxuICBtZW1vcnlMaW1pdE1pQjogNTEyLFxufSk7XG5cbm1haW5Db250YWluZXIuYWRkUG9ydE1hcHBpbmdzKHtcbiAgY29udGFpbmVyUG9ydDogODAsXG4gIHByb3RvY29sOiBlY3MuUHJvdG9jb2wuVENQLFxufSk7XG5cbi8vIE5hbWUgY29udGFpbmVyIHdpdGggU1JWXG5jb25zdCBuYW1lQ29udGFpbmVyID0gdGFza0RlZmluaXRpb24uYWRkQ29udGFpbmVyKCduYW1lJywge1xuICBpbWFnZTogZWNzLkNvbnRhaW5lckltYWdlLmZyb21SZWdpc3RyeSgnbmF0aGFucGVjay9uYW1lJyksXG4gIGVudmlyb25tZW50OiB7XG4gICAgUE9SVDogJzgxJyxcbiAgfSxcbiAgbWVtb3J5UmVzZXJ2YXRpb25NaUI6IDMyLFxuICBtZW1vcnlMaW1pdE1pQjogNTEyLFxufSk7XG5cbm5hbWVDb250YWluZXIuYWRkUG9ydE1hcHBpbmdzKHtcbiAgY29udGFpbmVyUG9ydDogODEsXG4gIHByb3RvY29sOiBlY3MuUHJvdG9jb2wuVENQLFxufSk7XG5cbm5ldyBlY3MuRWMyU2VydmljZShzdGFjaywgJ1NlcnZpY2UnLCB7XG4gIGNsdXN0ZXIsXG4gIHRhc2tEZWZpbml0aW9uLFxuICBkZXNpcmVkQ291bnQ6IDMsXG4gIGNsb3VkTWFwT3B0aW9uczoge1xuICAgIGNvbnRhaW5lcjogbmFtZUNvbnRhaW5lcixcbiAgICBjb250YWluZXJQb3J0OiA4MSxcbiAgICBkbnNSZWNvcmRUeXBlOiBjbG91ZG1hcC5EbnNSZWNvcmRUeXBlLlNSVixcbiAgfSxcbn0pO1xuXG5hcHAuc3ludGgoKTsiXX0=