"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const cdk = require("@aws-cdk/core");
const integ_tests_1 = require("@aws-cdk/integ-tests");
const codebuild = require("../lib");
const app = new cdk.App();
const stack = new cdk.Stack(app, 'CodeBuildAssetBuildSpecStack');
// Create a codebuild project using a local asset as the buildspec file
const buildSpec = codebuild.BuildSpec.fromAsset(path.resolve(__dirname, 'build-spec-asset.yml'));
const project = new codebuild.Project(stack, 'MyProject', {
    buildSpec,
});
const integ = new integ_tests_1.IntegTest(app, 'AssetBuildSpecTest', { testCases: [stack] });
const getBuildProject = integ.assertions.awsApiCall('CodeBuild', 'batchGetProjects', {
    names: [project.projectName],
});
getBuildProject.assertAtPath('projects.0.name.buildspec', integ_tests_1.ExpectedResult.exact(project.projectName));
getBuildProject.assertAtPath('projects.0.source.buildspec', integ_tests_1.ExpectedResult.stringLikeRegexp('.+'));
const getBuildProjectBuildSpecArn = getBuildProject.getAttString('projects.0.source.buildspec');
// Assert that the buildspec for the project is in fact an S3 object arn
// by parsing it and calling `getObject`.
const { resource, resourceName } = cdk.Arn.parse(getBuildProjectBuildSpecArn);
integ.assertions.awsApiCall('S3', 'getObject', {
    Bucket: resource,
    Key: resourceName,
});
// Kick off a build
const startBuild = integ.assertions.awsApiCall('CodeBuild', 'startBuild', {
    projectName: project.projectName,
});
// Describe the build and wait for the status to be successful
integ.assertions.awsApiCall('CodeBuild', 'batchGetBuilds', {
    ids: [startBuild.getAttString('build.id')],
}).assertAtPath('builds.0.buildStatus', integ_tests_1.ExpectedResult.stringLikeRegexp('SUCCEEDED')).waitForAssertions({
    totalTimeout: cdk.Duration.minutes(5),
    interval: cdk.Duration.seconds(30),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYXNzZXQtYnVpbGQtc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImludGVnLmFzc2V0LWJ1aWxkLXNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFDN0IscUNBQXFDO0FBQ3JDLHNEQUFpRTtBQUNqRSxvQ0FBb0M7QUFFcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSw4QkFBOEIsQ0FBQyxDQUFDO0FBRWpFLHVFQUF1RTtBQUN2RSxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7QUFDakcsTUFBTSxPQUFPLEdBQUcsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUU7SUFDeEQsU0FBUztDQUNWLENBQUMsQ0FBQztBQUVILE1BQU0sS0FBSyxHQUFHLElBQUksdUJBQVMsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFL0UsTUFBTSxlQUFlLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLGtCQUFrQixFQUFFO0lBQ25GLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7Q0FDN0IsQ0FBQyxDQUFDO0FBRUgsZUFBZSxDQUFDLFlBQVksQ0FDMUIsMkJBQTJCLEVBQzNCLDRCQUFjLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FDMUMsQ0FBQztBQUVGLGVBQWUsQ0FBQyxZQUFZLENBQzFCLDZCQUE2QixFQUM3Qiw0QkFBYyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUN0QyxDQUFDO0FBR0YsTUFBTSwyQkFBMkIsR0FBRyxlQUFlLENBQUMsWUFBWSxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFFaEcsd0VBQXdFO0FBQ3hFLHlDQUF5QztBQUN6QyxNQUFNLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDOUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtJQUM3QyxNQUFNLEVBQUUsUUFBUTtJQUNoQixHQUFHLEVBQUUsWUFBWTtDQUNsQixDQUFDLENBQUM7QUFFSCxtQkFBbUI7QUFDbkIsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLFlBQVksRUFBRTtJQUN4RSxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7Q0FDakMsQ0FBQyxDQUFDO0FBRUgsOERBQThEO0FBQzlELEtBQUssQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRTtJQUN6RCxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0NBQzNDLENBQUMsQ0FBQyxZQUFZLENBQ2Isc0JBQXNCLEVBQ3RCLDRCQUFjLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQzdDLENBQUMsaUJBQWlCLENBQUM7SUFDbEIsWUFBWSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNyQyxRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0NBQ25DLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBJbnRlZ1Rlc3QsIEV4cGVjdGVkUmVzdWx0IH0gZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMnO1xuaW1wb3J0ICogYXMgY29kZWJ1aWxkIGZyb20gJy4uL2xpYic7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5jb25zdCBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnQ29kZUJ1aWxkQXNzZXRCdWlsZFNwZWNTdGFjaycpO1xuXG4vLyBDcmVhdGUgYSBjb2RlYnVpbGQgcHJvamVjdCB1c2luZyBhIGxvY2FsIGFzc2V0IGFzIHRoZSBidWlsZHNwZWMgZmlsZVxuY29uc3QgYnVpbGRTcGVjID0gY29kZWJ1aWxkLkJ1aWxkU3BlYy5mcm9tQXNzZXQocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJ2J1aWxkLXNwZWMtYXNzZXQueW1sJykpO1xuY29uc3QgcHJvamVjdCA9IG5ldyBjb2RlYnVpbGQuUHJvamVjdChzdGFjaywgJ015UHJvamVjdCcsIHtcbiAgYnVpbGRTcGVjLFxufSk7XG5cbmNvbnN0IGludGVnID0gbmV3IEludGVnVGVzdChhcHAsICdBc3NldEJ1aWxkU3BlY1Rlc3QnLCB7IHRlc3RDYXNlczogW3N0YWNrXSB9KTtcblxuY29uc3QgZ2V0QnVpbGRQcm9qZWN0ID0gaW50ZWcuYXNzZXJ0aW9ucy5hd3NBcGlDYWxsKCdDb2RlQnVpbGQnLCAnYmF0Y2hHZXRQcm9qZWN0cycsIHtcbiAgbmFtZXM6IFtwcm9qZWN0LnByb2plY3ROYW1lXSxcbn0pO1xuXG5nZXRCdWlsZFByb2plY3QuYXNzZXJ0QXRQYXRoKFxuICAncHJvamVjdHMuMC5uYW1lLmJ1aWxkc3BlYycsXG4gIEV4cGVjdGVkUmVzdWx0LmV4YWN0KHByb2plY3QucHJvamVjdE5hbWUpLFxuKTtcblxuZ2V0QnVpbGRQcm9qZWN0LmFzc2VydEF0UGF0aChcbiAgJ3Byb2plY3RzLjAuc291cmNlLmJ1aWxkc3BlYycsXG4gIEV4cGVjdGVkUmVzdWx0LnN0cmluZ0xpa2VSZWdleHAoJy4rJyksXG4pO1xuXG5cbmNvbnN0IGdldEJ1aWxkUHJvamVjdEJ1aWxkU3BlY0FybiA9IGdldEJ1aWxkUHJvamVjdC5nZXRBdHRTdHJpbmcoJ3Byb2plY3RzLjAuc291cmNlLmJ1aWxkc3BlYycpO1xuXG4vLyBBc3NlcnQgdGhhdCB0aGUgYnVpbGRzcGVjIGZvciB0aGUgcHJvamVjdCBpcyBpbiBmYWN0IGFuIFMzIG9iamVjdCBhcm5cbi8vIGJ5IHBhcnNpbmcgaXQgYW5kIGNhbGxpbmcgYGdldE9iamVjdGAuXG5jb25zdCB7IHJlc291cmNlLCByZXNvdXJjZU5hbWUgfSA9IGNkay5Bcm4ucGFyc2UoZ2V0QnVpbGRQcm9qZWN0QnVpbGRTcGVjQXJuKTtcbmludGVnLmFzc2VydGlvbnMuYXdzQXBpQ2FsbCgnUzMnLCAnZ2V0T2JqZWN0Jywge1xuICBCdWNrZXQ6IHJlc291cmNlLFxuICBLZXk6IHJlc291cmNlTmFtZSxcbn0pO1xuXG4vLyBLaWNrIG9mZiBhIGJ1aWxkXG5jb25zdCBzdGFydEJ1aWxkID0gaW50ZWcuYXNzZXJ0aW9ucy5hd3NBcGlDYWxsKCdDb2RlQnVpbGQnLCAnc3RhcnRCdWlsZCcsIHtcbiAgcHJvamVjdE5hbWU6IHByb2plY3QucHJvamVjdE5hbWUsXG59KTtcblxuLy8gRGVzY3JpYmUgdGhlIGJ1aWxkIGFuZCB3YWl0IGZvciB0aGUgc3RhdHVzIHRvIGJlIHN1Y2Nlc3NmdWxcbmludGVnLmFzc2VydGlvbnMuYXdzQXBpQ2FsbCgnQ29kZUJ1aWxkJywgJ2JhdGNoR2V0QnVpbGRzJywge1xuICBpZHM6IFtzdGFydEJ1aWxkLmdldEF0dFN0cmluZygnYnVpbGQuaWQnKV0sXG59KS5hc3NlcnRBdFBhdGgoXG4gICdidWlsZHMuMC5idWlsZFN0YXR1cycsXG4gIEV4cGVjdGVkUmVzdWx0LnN0cmluZ0xpa2VSZWdleHAoJ1NVQ0NFRURFRCcpLFxuKS53YWl0Rm9yQXNzZXJ0aW9ucyh7XG4gIHRvdGFsVGltZW91dDogY2RrLkR1cmF0aW9uLm1pbnV0ZXMoNSksXG4gIGludGVydmFsOiBjZGsuRHVyYXRpb24uc2Vjb25kcygzMCksXG59KTtcbiJdfQ==