import { Construct } from 'constructs';
import { IResource, RemovalPolicy, Resource } from '../../core';
import {
  TableClass, SecondaryIndexProps, SchemaOptions, Attribute,
  BillingMode,
} from './table';

/**
 * Capacity modes used for read and write operations.
 */
export enum CapacityMode {
  /**
   * Fixed capacity mode.
   */
  FIXED = 'FIXED',

  /**
   * Autoscaled capacity mode.
   */
  AUTOSCALED = 'AUTOSCALED',
}

/**
 * Options used to configure capacity settings for fixed and autoscaled mode.
 */
interface CapacityConfigOptions {
  /**
   * The number of capacity units for fixed capacity mode.
   *
   * @default - no capacity units
   */
  readonly units?: number;

  /**
   * The minimum capacity to scale to for autoscaled capacity mode.
   *
   * @default - no minimum capacity
   */
  readonly minCapacity?: number;

  /**
   * The maximum capacity to scale to for autoscaled capacity mode.
   *
   * @default - no maximum capacity
   */
  readonly maxCapacity?: number;

  /**
   * The ratio of consumed capacity units to provisioned capacity units to target for autoscaled
   * capacity mode.
   *
   * @default - no target utilization percent
   */
  readonly targetUtilizationPercent?: number;
}

/**
 * Options used to configure read and write capacity for table operations.
 */
export interface ThroughputOptions {
  /**
   * The capacity used for read operations.
   */
  readonly readCapacity: Capacity;

  /**
   * The capacity used for write operations.
   */
  readonly writeCapacity: Capacity;
}

/**
 * Options used to configure autoscaled capacity mode.
 */
export interface AutoscaledCapacityOptions {
  /**
   * The minimum capacity to scale to.
   */
  readonly minCapacity: number;

  /**
   * The maximum capacity to scale to.
   */
  readonly maxCapacity: number;

  /**
   * The ratio of consumed capacity units to provisioned capacity units.
   *
   * @default 70%
   */
  readonly targetUtilizationPercent?: number;
}

/**
 * Options used to configure a global secondary index.
 */
export interface GlobalSecondaryIndexOptions extends SecondaryIndexProps, SchemaOptions {
  /**
   * The read capacity for the global secondary index.
   *
   * Note: This can only be provided if the table billing is provisioned.
   *
   * @default - inherited from global table
   */
  readonly readCapacity?: Capacity;

  /**
   * The write capacity for the global secondary index.
   *
   * Note: This can only be provided if the table billing is on-demand.
   *
   * @default - inherited from global table
   */
  readonly writeCapacity?: Capacity;
}

/**
 * Options used to configure a local secondary index.
 */
export interface LocalSecondaryIndexOptions extends SecondaryIndexProps {
  /**
   * The attribute of a sort key for the local secondary index.
   */
  readonly sortKey: Attribute;
}

/**
 * Common configuration options between a global table and its replicas.
 */
interface TableOptions {
  /**
   * Whether or not CloudWatch contributor insights is enabled for all replicas in the
   * global table.
   *
   * Note: This property is configurable on a per-replica basis.
   *
   * @default false
   */
  readonly constributorInsights?: boolean;

  /**
   * Whether or not deletion protection is enabled for all replicas in the global table.
   *
   * Note: This property is configurable on a per-replica basis.
   *
   * @default false
   */
  readonly deletionProtection?: boolean;

  /**
   * Whether or not point-in-time recovery is enabled for all replicas in the global table.
   *
   * Note: This property is configurable on a per-replica basis.
   *
   * @default false
   */
  readonly pointInTimeRecovery?: boolean;

  /**
   * The table class for all replicas in the global table.
   *
   * Note: This property is configurable on a per-replica basis
   *
   * @default TableClass.STANDARD
   */
  readonly tableClass?: TableClass
}

/**
 * Options used to configure a replica table.
 */
export interface ReplicaTableOptions extends TableOptions {}

/**
 * Properties of a global table.
 */
export interface GlobalTableProps extends TableOptions, SchemaOptions {
  /**
   * The name of all replicas in the global table.
   *
   * @default - generated by CloudFormation
   */
  readonly tableName?: string;

  /**
   * The name of the TTL attribute for all replicas in the global table.
   *
   * @default - TTL is disabled
   */
  readonly timeToLiveAttribute?: string;

  /**
   * The removal policy to apply to all replicas in the global table.
   *
   * @default RemovalPolicy.RETAIN
   */
  readonly removalPolicy?: RemovalPolicy;

  /**
   * The billing used for all replicas in the global table. This is used to configure both the
   * billing mode and how read and write capacity is managed.
   *
   * @default Billing.onDemand()
   */
  readonly billing?: Billing;

  /**
   * The replicas in the global table.
   *
   * Note: You can create a new global table with as many replicas as needed. You can add or
   * remove replicas after table creation, but you can only add or remove a single replica in
   * each update.
   *
   * @default - a single replica will exist in the region associated with the deployment stack
   */
  readonly replicas?: ReplicaTableOptions[];

  /**
   * Global secondary indexes to be created on all replicas in the global table.
   *
   * Note: You can create up to 20 global secondary indexes. You can only create or delete one global
   * secondary index in a single stack operation. By default, each replica in your global table will
   * have the same global secondary index settings. However, the `readCapacity` of a global secondary
   * index can be set on a per-replica basis.
   *
   * @default - no global secondary indexes
   */
  readonly globalSecondaryIndexes?: GlobalSecondaryIndexOptions[];

  /**
   * Local secondary indexes to be created on all replicas in the global table.
   *
   * Note: You can only have up to five local secondary indexes.
   *
   * @default - no local secondary indexes
   */
  readonly localSecondaryIndexes?: LocalSecondaryIndexOptions[];
}

export interface IGlobalTable extends IResource {}

abstract class GlobalTableBase extends Resource implements IGlobalTable {}

export class GlobalTable extends GlobalTableBase {
  public constructor(scope: Construct, id: string, props: GlobalTableProps) {
    super(scope, id, { physicalName: props.tableName });
  }
}

/**
 * The capacity mode and settings for read and write operations.
 */
export class Capacity {
  /**
   * Used to configure fixed capacity mode with specific capacity units.
   */
  public static fixed(units: number) {
    return new Capacity(CapacityMode.FIXED, { units });
  }

  /**
   * Used to configure autoscaled capacity mode with capacity autoscaled setting.
   */
  public static autoscaled(options: AutoscaledCapacityOptions) {
    return new Capacity(CapacityMode.AUTOSCALED, { ...options });
  }

  /**
   * The capacity mode for read and write operations.
   */
  public readonly mode: string;

  /**
   * The number of capacity units.
   *
   * Note: This is only set when the capacity mode is fixed.
   */
  public readonly units?: number;

  /**
   * The minimum capacity to scale to.
   *
   * Note: This is only set when the capacity mode is autoscaled.
   */
  public readonly minCapacity?: number;

  /**
   * The maximum capacity to scale to.
   *
   * Note: This is only set when the capacity mode is autoscaled.
   */
  public readonly maxCapacity?: number;

  /**
   * The ratio of consumed capacity units to provisioned capacity units.
   *
   * Note: This is only set when the capacity mode is autoscaled.
   */
  public readonly targetUtilizationPercent?: number;

  private constructor(mode: string, options: CapacityConfigOptions) {
    this.mode = mode;
    this.units = options.units;
    this.minCapacity = options.minCapacity;
    this.maxCapacity = options.maxCapacity;
    this.targetUtilizationPercent = options.targetUtilizationPercent;
  }
}

/**
 * Represents the billing used to specify how you are charged for read and write throughput
 * and how you manage capacity.
 */
export class Billing {
  /**
   * Configure on-demand billing.
   */
  public static onDemand() {
    return new Billing(BillingMode.PAY_PER_REQUEST);
  }

  /**
   * Configure provisioned billing.
   */
  public static provisioned(options: ThroughputOptions) {
    return new Billing(BillingMode.PROVISIONED, options);
  }

  /**
   * The billing mode for read and write operations.
   */
  public readonly mode: string;

  /**
   * The capacity used for read operations.
   *
   * Note: This is only set if the billing mode is provisioned.
   */
  public readonly readCapacity?: Capacity;

  /**
   * The capacity used for write operations.
   *
   * Note: This is only set if the billing mode is provisioned.
   */
  public readonly writeCapacity?: Capacity;

  private constructor(mode: string, options?: ThroughputOptions) {
    this.mode = mode;
    this.readCapacity = options?.readCapacity;
    this.writeCapacity = options?.writeCapacity;
  }
}
